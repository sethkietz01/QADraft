@model QADraft.ViewModels.CombinedEventsViewModel

@{
    ViewData["Title"] = "Home Page";
    Layout = ViewBag.Layout;
    string userRole = ViewBag.role;
}

<style>
    .editable {
        width: 80%;
    }
</style>

<div class="text-center">
    <h1 class="display-4">Welcome, @Context.Session.GetString("FirstName")!</h1>
</div>

<!-- Side bar that contains external links -->
    <div class="link-bar">
        <!-- Each link has an image imbedded into them. The links will open in a new tab. -->
        <a class="link" title="Open All" href="" onclick="openAll()"><img src="~/images/open-all.png"></a> <!-- Shortcut to open all external links at once -->

        <a class="link" title="Argos" href="https://ethosid.eku.edu/cas/login?service=https%3A%2F%2Fargosp.eku.edu%2Findex.html#_ga=2.127587661.1799644479.1720011051-1843477414.1720011051" target="_blank" rel="noopener noreferrer"><img src="~/images/argosLogo.png" alt="Argos"></a>
        <a class="link" title="Asana" href="https://app.asana.com/-/login?_gl=1*lpkqvz*_ga*MjM4ODA2MDE5LjE3MTY0NzUyMjQ.*_ga_J1KDXMCQTH*MTcxNjQ3NTIyNC4xLjEuMTcxNjQ3NTIyNC42MC4wLjEwNTc1MjYwMTA.*_fplc*bjdDRk1QMTklMkZaaXpyMlo4NUkwaVVBcFRxWW5aQzFySXQ5JTJCaUo1QjFTOGdiWDNOSUhUMUMlMkJ1d1htb3NqNks2WmtkaG51ZVBuTjViQzFtUXoxRzhsUzlpMDZRVnY4b0JTTnFYYnBIaklwRlFBcUpBS3MxdnZXNTJjNVZta1V3JTNEJTNE" target="_blank"><img src="~/images/asanaLogo.png" alt="Asana"></a>
        <a class="link" title="Discord" href="https://discord.com/login" target="_blank"><img src="~/images/discordLogo.png" alt="Discord"></a>
        <a id="docusign-link" class="link" title="Docusign" href="https://account.docusign.com/oauth/auth?response_type=code&scope=all%20click.manage%20me_profile%20room_forms%20room_fields%20inproductcommunication_read%20data_explorer_signing_insights%20notary_read%20notary_write%20search_read%20search_write%20webforms_manage%20dtr%20valmod_manage%20signature&client_id=2CC56DC9-4BCD-4B55-8AB0-8BA60BAE1065&redirect_uri=https%3A%2F%2Fapps.docusign.com%2Fauthenticate&state=%7B%22widgetId%22%3A%22%40ds%2Fsend%22%2C%22xsrfToken%22%3A%22tKVf99o%2B5aaZ0d%2Bc8bp%2B%2B5D9h0qXk3IZT799yTuMknkDgNACnVPzjWynA8zxlH%2FKIcVY2vtAfu6vzo%2BvLGg8avfd%2FKn379N4HWJwxhDyHT9prk2TNzaSpmqvqllpphw7fvcWONPy47J216fgi2XsYgvYUXDY07kT4oYZGwDU6ks%3D%22%2C%22redirectUri%22%3A%22%2Fsend%22%7D" target="_blank"><img src="~/images/docusignLogo.png" alt="Docusign"></a>
        <a class="link" title="Google Drive" href="https://www.google.com/intl/en-US/drive/" target="_blank"><img src="~/images/driveLogo.png" alt="Google Drive"></a>
        <a class="link" title="Outlook" href="https://it.eku.edu/mso365" target="_blank"><img src="~/images/outlookLogo.png" alt="Outlook"></a>
        <a class="link" title="Snipe-IT" href="https://itservice6.eku.edu/login" target="_blank"><img src="~/images/snipeitLogo.png" alt="Snipe-IT"></a>
        <a class="link" id="help-link" title="Help" href="https://docs.google.com/document/d/1mkzdgdh4_moWugLptXcuLwo0DV9lP9MwQMLhCXnE5SQ/edit?usp=sharing" target="_blank"><img src="~/images/helpIcon.png" alt="Help"></a>
    </div>
    <script>
        // JS for link-shortcut options. window.open() will open the given link in a new tab
        function openAll(){
            window.open("https://argosp.eku.edu/Argos/AWV/#explorer/Geeks/Equipment%20Checkout", "_blank");
            window.open("https://discord.com/login", "_blank");
            window.open("https://app.asana.com/-/login?_gl=1*lpkqvz*_ga*MjM4ODA2MDE5LjE3MTY0NzUyMjQ.*_ga_J1KDXMCQTH*MTcxNjQ3NTIyNC4xLjEuMTcxNjQ3NTIyNC42MC4wLjEwNTc1MjYwMTA.*_fplc*bjdDRk1QMTklMkZaaXpyMlo4NUkwaVVBcFRxWW5aQzFySXQ5JTJCaUo1QjFTOGdiWDNOSUhUMUMlMkJ1d1htb3NqNks2WmtkaG51ZVBuTjViQzFtUXoxRzhsUzlpMDZRVnY4b0JTTnFYYnBIaklwRlFBcUpBS3MxdnZXNTJjNVZta1V3JTNEJTNE");
            window.open("https://account.docusign.com/oauth/auth?response_type=code&scope=all%20click.manage%20me_profile%20room_forms%20room_fields%20inproductcommunication_read%20data_explorer_signing_insights%20notary_read%20notary_write%20search_read%20search_write%20webforms_manage%20dtr%20valmod_manage%20signature&client_id=2CC56DC9-4BCD-4B55-8AB0-8BA60BAE1065&redirect_uri=https%3A%2F%2Fapps.docusign.com%2Fauthenticate&state=%7B%22widgetId%22%3A%22%40ds%2Fsend%22%2C%22xsrfToken%22%3A%22tKVf99o%2B5aaZ0d%2Bc8bp%2B%2B5D9h0qXk3IZT799yTuMknkDgNACnVPzjWynA8zxlH%2FKIcVY2vtAfu6vzo%2BvLGg8avfd%2FKn379N4HWJwxhDyHT9prk2TNzaSpmqvqllpphw7fvcWONPy47J216fgi2XsYgvYUXDY07kT4oYZGwDU6ks%3D%22%2C%22redirectUri%22%3A%22%2Fsend%22%7D");
            window.open("https://www.google.com/intl/en-US/drive/");
            window.open("https://it.eku.edu/mso365");
            window.open("https://itservice6.eku.edu/login");
        }
    </script>

<body class="dashboard">
    <div class="calendar-container">
        <h4>Event Calendar</h4>
        <div class="calendar">
            <table class="event-calendar">
                <thead>
                    <tr>
                        <th>Event Time</th>
                        <th>Event Information</th>
                        @if (userRole == "Geek") @*Check that the user is not a Geek. The Geek view will not present actions so the header should not be made*@
                        { 
                            @* If the user is a Geek, create a blank column so that the header bar displays properly *@
                            <th></th>
                        }
                        else 
                        {
                            @* If the user is not a Geek, display the calendar with the actions header *@
                            <th>Actions</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var eventItem in Model.EventsViewModel.EventList.OrderBy(e => e.EventTime))
                    {
                        var isPastEvent = eventItem.EventTime < DateTime.Now;
                        var date = eventItem.EventTime.ToString("MM/dd/yyyy");
                        var time = eventItem.EventTime.ToString("h:mm tt");

                        <tr class="@if (isPastEvent) { <text>past-event</text> }" data-event-id="@eventItem.Id">
                            <td>
                                <input type="submit" id="submit_time_@eventItem.Id" name="id" value="@eventItem.Id" hidden/>
                                    <text >@time <br/> @date</text>
                            </td>
                            <td>
                                <input type="submit" id="submit_info_@eventItem.Id" name="id" value="@eventItem.Id" hidden/>
                                <input type="text" id="text_info_@eventItem.Id" name="text" hidden />
                                    <text>@eventItem.EventInformation</text>
                            </td>
                            <td>
                                @if (userRole != "Geek") @*Check that the user is not a Geek. Geek should not be able to edit calendar*@
                                {
                                <div class="form-container">
                                    <button class="buttons table-buttons" onclick="showEditEventModal('@eventItem.Id', '@eventItem.EventTime.ToString("s")', '@eventItem.EventInformation')">Edit</button>
                                    <form method="post" asp-controller="Event" asp-action="DeleteEvent">
                                        <div class="form-group">
                                            <input type="submit" id="submit_delete" name="eventId" value="@eventItem.Id" hidden/>
                                            <button id="delete-event-button" type="button" class="buttons table-buttons" onclick="openConfirmationDialog(event)">Delete</button>   
                                        </div>
                                    </form>
                                </div>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="calendar-buttons">
            <!-- Button to trigger modal -->
            @if (userRole != "Geek") @*Check that the user is not a Geek. Geeks should not be able to edit calendar*@
            {
            <button type="button" id="newEventButton" onclick = "setCurrentDateTime()" class="buttons form-buttons" data-bs-toggle="modal" data-bs-target="#addEventModal">
                Add New Event
            </button>
            }
            <button type="button" id="togglePastEvents" class="buttons form-buttons">
                Show/Hide Past Events
            </button>
        </div> <!-- close calendar-buttons -->
    </div> <!-- close calendar-container -->
    
    <div class="embed-reports-container" id="embed-reports-container">
            <div class="loader"></div> 
        </div>  
    </div>


    <!-- Modal for adding new event -->
    <div class="modal fade" id="addEventModal" tabindex="-1" aria-labelledby="addEventModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addEventModalLabel">Add New Event</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="AddEventForm" asp-controller="Event" asp-action="AddEvent" method="post">
                    <div class="modal-body">
                        <!-- Form that posts to the EventController's AddEvent action -->
                            <div class="form-group">
                                <label asp-for="NewEvent.EventTime" class="control-label">Event Time</label>
                                <input asp-for="NewEvent.EventTime" class="form-control" type="datetime-local" id="eventTimeInput" />
                                <span asp-validation-for="NewEvent.EventTime" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="NewEvent.EventInformation" class="control-label">Event Information</label>
                                <input asp-for="NewEvent.EventInformation" class="form-control" placeholder="Enter Event Info" />
                                <span asp-validation-for="NewEvent.EventInformation" class="text-danger"></span>
                            </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" onclick="" class="buttons">Add Event</button>
                        <span></span>
                        <button type="button" class="buttons" data-bs-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</body>

<!-- Modal Popup for Delete Event confirmation -->
<dialog id="dialog">
	<div class="confirmation-content">
        <!-- Confirmation text -->
        <p>Are you sure you want to delete this Event?</p>
        <!-- Confirmation button container -->
        <div class="confirmation-buttons">
            <!-- Confirmation buttons. Yes will call confirmDelete which will trigger 
            the deleteButton input. No will close the confirmation dialog -->
            <button id="confirm-delete-event-button" class="buttons" onclick="deleteEvent()">Yes</button> 
            <button id="cancel-delete-event-button" class="buttons buttons-accent" onclick="window.dialog.close();">No</button>
        </div>
    </div>
	<button onclick="window.dialog.close();" class="x">❌</button>
</dialog>


<!-- Modal Popup for Edit Event -->
<dialog id="dialog-edit-event">
	<div class="confirmation-content">
        <!-- Confirmation text -->
        <h2>Edit Event<h2>
        <form id="edit-event-form" asp-controller="Event" asp-action="EditEvent" method="post">
            <div class="form-group">
                <label class="control-label popup-labels">Event Time</label>
                <input name="EventTime" class="form-control" type="datetime-local" id="edit-event-time-input" />
            </div>
            <div class="form-group">
                <label class="control-label popup-labels">Event Information</label>
                <input name="EventInformation" class="form-control" placeholder="Enter Event Info" id="edit-event-info-input"/>
            </div>
        </form>
        <!-- Confirmation button container -->
        <div class="confirmation-buttons">
            <!-- Confirmation buttons. Yes will call confirmDelete which will trigger 
            the deleteButton input. No will close the confirmation dialog -->
            <button id="confirm-delete-event-button" class="buttons" onclick="editEvent()">Confirm Edits</button> 
            <button id="cancel-delete-event-button" class="buttons buttons-accent" onclick="closeEditEventModal()">Cancel</button>
        </div>
    </div>
	<button onclick="document.getElementById('dialog-edit-event').close();" class="x">❌</button>
</dialog>


@section Scripts {
    <!-- JQuery and Bootstrap JS from CDN -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Chart.js from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Site-specific JavaScript -->
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    <!-- Validation Scripts Partial -->
    <partial name="_ValidationScriptsPartial" />

    <!-- Script to set the default date and time in the event time input -->
    <script>
        // $(document).ready(function () {
        //     function setCurrentDateTime() {
        //         const now = new Date();
        //         const year = now.getFullYear();
        //         const month = ('0' + (now.getMonth() + 1)).slice(-2);
        //         const day = ('0' + now.getDate()).slice(-2);
        //         const hours = ('0' + now.getHours()).slice(-2);
        //         const minutes = ('0' + now.getMinutes()).slice(-2);

        //         const formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
        //         $('#eventTimeInput').val(formattedDateTime);
        //     }

        //     setCurrentDateTime();

        //     // Set the current date and time when the modal is opened
        //     $('#addEventModal').on('shown.bs.modal', setCurrentDateTime);
        // });

        

        

        $('AddEventForm').submit(function (event) {
            const selectedDateTime = new Date($('#eventTimeInput').val());
            const currentDateTime = new Date();

            if (selectedDateTime < currentDateTime) {
                alert('Please select a date and time that is after the current date and time.');
                event.preventDefault(); // Prevent form submission
            }
        });

        $(document).ready(function () {
             // Toggle button click event
            $('#togglePastEvents').click(function () {
                $('.past-event').toggle(); // Toggle visibility of past events
            });

            var currentYear = new Date().getFullYear();
            var yearStartDate = new Date(currentYear, 4, 14).toISOString();    //may 14th
            var yearEndDate = new Date(currentYear, 7, 19).toISOString();    //august 19th

            // Load SnipeIt view component
            var _url = '@Url.Action("GetSnipeit", "Home")';
            $.ajax({
                type: "GET",
                url: _url,
                data: { startDate: yearStartDate, endDate: yearEndDate},
                success: function (result) {
                    $("#embed-reports-container").html(result);
                },
            });
            
        });

        // function editInfo(eventId) {
        //     // Get the element that called function
        //     var textArea = document.getElementById("info_"+eventId);
        //     // Add event listener for Enter key
        //     textArea.addEventListener('keypress', function(event) {
        //         if (event.key === "Enter") {
        //             // Prevent enter key from inserting line break
        //             event.preventDefault();
        //             // Get the new text
        //             var newText = textArea.querySelector('text').textContent;
        //             // Save the new text to input to be sent during POSt
        //             var textInput = document.getElementById("text_info_"+eventId);
        //             textInput.value = newText;
        //             // Submit the form
        //             var submitButton = document.getElementById("submit_info_"+eventId);
        //             submitButton.click();
        //         }
        //     });

        // }


        // function editTime(eventId) {
        //     //get the element that called function
        //     var textArea = document.getElementById("time_"+eventId);
            
        //     // Get the current Date/Time
        //     var currentValue = textArea.innerText.trim();
        //     // Format to match datetime-local expected input
        //     //var newTime = formateDateTime(currentValue);

        //     var newDateInput = document.createElement('input');
        //     newDateInput.type = 'datetime-local';
        //     newDateInput.name = "time";

        //     textArea.style.display = 'none';
        //     textArea.parentElement.appendChild(newDateInput);
        //     newDateInput.focus();

        //     // Add event listener for Enter key
        //     newDateInput.addEventListener('keypress', function(event) {
        //         if (event.key === "Enter") {
        //             // Prevent enter key from inserting line break
        //             event.preventDefault();
        //             console.log(newDateInput.value);

        //             // Submit the form
        //             // document.getElementById("submit_time_"+eventId).click();

        //         }
        //     });

        //     document.addEventListener("mousedown", (event) => {
        //         // Check if the click was outside the newDateInput and textArea
        //         if (!newDateInput.contains(event.target) && event.target !== textArea) {
        //             textArea.style.display = 'block';
        //             newDateInput.remove();
        //         }
        //         // Chcek if the date-time input is still the active element
        //         else if (newDateInput == document.activeElement) {
        //             // Do nothing
        //         }
        //         // Check if there is an existing date input
        //         else {
        //             textArea.style.display = 'none';
        //             textArea.parentElement.appendChild(newDateInput);
        //         }

        //     });

        // }


        // function editEventDate(td) {
        //     var currentValue = td.innerText.trim();

        //     var newDateInput = document.createElement('input');
        //     newDateInput.type = 'datetime-local';
        //     newDateInput.value = currentValue;

        //     td.innerText = '';
        //     td.appendChild(newDateInput);

        //     newDateInput.focus();

        //     newDateInput.addEventListener('change', function() {
        //         var newValue = newDateInput.value.trim();
        
        //         // Get eventId from the parent tr or pass it to this function explicitly
        //         var eventId = td.closest('tr').getAttribute('data-event-id');

        //         // const month = String(newValue.getMonth() + 1).padStart(2, '0'); 
        //         // const day = String(newValue.getDate()).padStart(2, '0');
        //         // const year = newValue.getFullYear();

        //         // formattedDate = `${month}/${day}/${year}`;

        //         td.innerText = newValue;

        //         var formData = new FormData();
        //         formData.append('eventId', eventId);
        //         formData.append('updatedEventTime', newValue);

        //         fetch('/Event/UpdateEventTime', {
        //             method: 'POST',
        //             body: formData
        //         })
        //         .then(response => {
        //             if (!response.ok) {
        //                 throw new Error('Network response was not ok');
        //             }
        //             console.log('Event updated successfully');
        //             window.location.reload();
        //         })
        //         .catch(error => {
        //             console.error('Error:', error);
        //         });
        //     });
        // }

        // function editEventInformation(td) 
        // {
        //     // Save the current content of the td
        //     var currentValue = td.innerText.trim();

        //     // Get the event ID from the parent tr
        //     var eventId = td.closest('tr').getAttribute('data-event-id');

        //     // Create an input field
        //     var input = document.createElement('input');
        //     input.type = 'text';
        //     input.value = currentValue;

        //     // Replace the td content with the input
        //     td.innerText = '';
        //     td.appendChild(input);

        //     // Focus on the input field
        //     input.focus();

        //     // Handle input blur to save changes
        //     input.addEventListener('blur', function() {
        //         // Get updated value
        //         var newValue = input.value.trim();


        //         if (newValue.trim() === "")
        //         {
        //             td.removeChild(input);
        //             td.innerText = currentValue;
        //             return;
        //         }

        //         // Display updated value in the table
        //         td.innerText = newValue;

        //         // Send a POST request to update the event
        //         var formData = new FormData();
        //         formData.append('eventId', eventId);
        //         formData.append('updatedEventInformation', newValue);

        //         fetch('/Event/UpdateEventInformation', {
        //             method: 'POST',
        //             body: formData
        //         })
        //         .then(response => {
        //             if (!response.ok) {
        //                 throw new Error('Network response was not ok');
        //             }
        //             console.log('Event updated successfully');
        //         })
        //         .catch(error => {
        //             console.error('Error:', error);
        //         });
        //     });
        // }


        // Function called by the delete button to open confirmation modal
        function openConfirmationDialog(event) {
            event.preventDefault(); // Prevent default behavior
            
            // Get the correct form to be submitted
            var parentForm = event.target.closest('form');
            window.currentForm = parentForm;
            // Show the modal
            window.dialog.showModal();
        }


        function deleteEvent(eventId) {
           // Using the form we saved in openConfirmationDialog(), use .click() on the form input to delete the QA
            window.currentForm.querySelector('input[type="submit"][id="submit_delete"]').click();
            // If for some reason the page does not change, close the popup and return false (serves to close the function)
            window.dialog.close();
            return false;
        }

        function showEditEventModal(eventId, eventTime, eventInfo) {
            console.log("yay");
            console.log(eventTime);

            var editEventForm = document.getElementById('edit-event-form');
            var editTimeInput = document.getElementById('edit-event-time-input');
            var editInfoInput = document.getElementById('edit-event-info-input');

            var idInput = document.createElement('input');
            idInput.setAttribute('type', 'hidden');
            idInput.setAttribute('name', 'Id');
            idInput.setAttribute('value', eventId);

            editEventForm.appendChild(idInput);

            editTimeInput.value = eventTime;
            editInfoInput.value = eventInfo;

            console.log("editTimeInput.value = " + editTimeInput.value);

            const dialogEditEvent = document.getElementById('dialog-edit-event');
            dialogEditEvent.showModal();
        }

        function editEvent() {
            var editEventForm = document.getElementById('edit-event-form');

            editEventForm.submit();
        }

        function closeEditEventModal() {
            var editTimeInput = document.getElementById('edit-event-time-input');
            var editInfoInput = document.getElementById('edit-event-info-input');
            const dialogEditEvent = document.getElementById('dialog-edit-event');

            editTimeInput.value = ''
            editInfoInput.value = '';

            dialogEditEvent.close();
        }

    </script>
}
