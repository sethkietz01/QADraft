@model QADraft.ViewModels.CombinedEventsViewModel

@{
    ViewData["Title"] = "Home Page";
    Layout = ViewBag.Layout;
}

<style>
    .editable {
        width: 80%;
    }
</style>

<div class="text-center">
    <h1 class="display-4">Welcome, @Context.Session.GetString("FirstName")!</h1>
</div>

<!-- Side bar that contains external links -->
    <div class="link-bar">
        <!-- Each link has an image imbedded into them. The links will open in a new tab. -->
        <a class="link" title="Open All" href="" onclick="openAll()"><img src="~/images/open-all.png"></a> <!-- Shortcut to open all external links at once -->

        <a class="link" title="Argos" href="https://argosp.eku.edu/Argos/AWV/#explorer/Geeks/Equipment%20Checkout" target="_blank" rel="noopener noreferrer"><img src="~/images/argosLogo.png" alt="Argos"></a>
        <a class="link" title="Asana" href="https://app.asana.com/-/login?_gl=1*lpkqvz*_ga*MjM4ODA2MDE5LjE3MTY0NzUyMjQ.*_ga_J1KDXMCQTH*MTcxNjQ3NTIyNC4xLjEuMTcxNjQ3NTIyNC42MC4wLjEwNTc1MjYwMTA.*_fplc*bjdDRk1QMTklMkZaaXpyMlo4NUkwaVVBcFRxWW5aQzFySXQ5JTJCaUo1QjFTOGdiWDNOSUhUMUMlMkJ1d1htb3NqNks2WmtkaG51ZVBuTjViQzFtUXoxRzhsUzlpMDZRVnY4b0JTTnFYYnBIaklwRlFBcUpBS3MxdnZXNTJjNVZta1V3JTNEJTNE" target="_blank"><img src="~/images/asanaLogo.png" alt="Asana"></a>
        <a class="link" title="Docusign" href="https://account.docusign.com/oauth/auth?response_type=code&scope=all%20click.manage%20me_profile%20room_forms%20room_fields%20inproductcommunication_read%20data_explorer_signing_insights%20notary_read%20notary_write%20search_read%20search_write%20webforms_manage%20dtr%20valmod_manage%20signature&client_id=2CC56DC9-4BCD-4B55-8AB0-8BA60BAE1065&redirect_uri=https%3A%2F%2Fapps.docusign.com%2Fauthenticate&state=%7B%22widgetId%22%3A%22%40ds%2Fsend%22%2C%22xsrfToken%22%3A%22tKVf99o%2B5aaZ0d%2Bc8bp%2B%2B5D9h0qXk3IZT799yTuMknkDgNACnVPzjWynA8zxlH%2FKIcVY2vtAfu6vzo%2BvLGg8avfd%2FKn379N4HWJwxhDyHT9prk2TNzaSpmqvqllpphw7fvcWONPy47J216fgi2XsYgvYUXDY07kT4oYZGwDU6ks%3D%22%2C%22redirectUri%22%3A%22%2Fsend%22%7D" target="_blank"><img src="~/images/docusignLogo.png" alt="Docusign"></a>
        <a class="link" title="Google Drive" href="https://www.google.com/intl/en-US/drive/" target="_blank"><img src="~/images/driveLogo.png" alt="Google Drive"></a>
        <a class="link" title="Outlook" href="https://it.eku.edu/mso365" target="_blank"><img src="~/images/outlookLogo.png" alt="Outlook"></a>
        <a class="link" title="Snipe-IT" href="https://itservice6.eku.edu/login" target="_blank"><img src="~/images/snipeitLogo.png" alt="Snipe-IT"></a>
        <a class="link" id="help-link" title="Help" href="https://docs.google.com/document/d/1mkzdgdh4_moWugLptXcuLwo0DV9lP9MwQMLhCXnE5SQ/edit?usp=sharing" target="_blank"><img src="~/images/helpIcon.png" alt="Help"></a>
    </div>
    <script>
        // JS for link-shortcut options. window.open() will open the given link in a new tab
        function openAll(){
            window.open("https://argosp.eku.edu/Argos/AWV/#explorer/Geeks/Equipment%20Checkout", "_blank");
            window.open("https://app.asana.com/-/login?_gl=1*lpkqvz*_ga*MjM4ODA2MDE5LjE3MTY0NzUyMjQ.*_ga_J1KDXMCQTH*MTcxNjQ3NTIyNC4xLjEuMTcxNjQ3NTIyNC42MC4wLjEwNTc1MjYwMTA.*_fplc*bjdDRk1QMTklMkZaaXpyMlo4NUkwaVVBcFRxWW5aQzFySXQ5JTJCaUo1QjFTOGdiWDNOSUhUMUMlMkJ1d1htb3NqNks2WmtkaG51ZVBuTjViQzFtUXoxRzhsUzlpMDZRVnY4b0JTTnFYYnBIaklwRlFBcUpBS3MxdnZXNTJjNVZta1V3JTNEJTNE");
            window.open("https://account.docusign.com/oauth/auth?response_type=code&scope=all%20click.manage%20me_profile%20room_forms%20room_fields%20inproductcommunication_read%20data_explorer_signing_insights%20notary_read%20notary_write%20search_read%20search_write%20webforms_manage%20dtr%20valmod_manage%20signature&client_id=2CC56DC9-4BCD-4B55-8AB0-8BA60BAE1065&redirect_uri=https%3A%2F%2Fapps.docusign.com%2Fauthenticate&state=%7B%22widgetId%22%3A%22%40ds%2Fsend%22%2C%22xsrfToken%22%3A%22tKVf99o%2B5aaZ0d%2Bc8bp%2B%2B5D9h0qXk3IZT799yTuMknkDgNACnVPzjWynA8zxlH%2FKIcVY2vtAfu6vzo%2BvLGg8avfd%2FKn379N4HWJwxhDyHT9prk2TNzaSpmqvqllpphw7fvcWONPy47J216fgi2XsYgvYUXDY07kT4oYZGwDU6ks%3D%22%2C%22redirectUri%22%3A%22%2Fsend%22%7D");
            window.open("https://www.google.com/intl/en-US/drive/");
            window.open("https://it.eku.edu/mso365");
            window.open("https://itservice6.eku.edu/login");
        }
    </script>

<body class="dashboard">
    <div class="calendar-container">
        <h4>Event Calendar</h4>
        <div class="calendar">
            <table class="event-calendar">
                <thead>
                    <tr>
                        <th>Event Time</th>
                        <th>Event Information</th>
                        <th>Actions</th> <!-- New column for delete button -->
                    </tr>
                </thead>
                <tbody>
                    @foreach (var eventItem in Model.EventsViewModel.EventList.OrderBy(e => e.EventTime))
                    {
                        var isPastEvent = eventItem.EventTime < DateTime.Now;
                        var date = eventItem.EventTime.ToString("MM/dd/yyyy");
                        var time = eventItem.EventTime.ToString("h:mm tt");

                        <tr class="@if (isPastEvent) { <text>past-event</text> }" data-event-id="@eventItem.Id">
                            <td>
                                <form contenteditable="true" class="editable">
                                    <text >@time <br/> @date</text>
                                </form>
                            </td>
                            <td>
                                <form method="post" asp-controller="Event" asp-action="EditEventInfo" 
                                contenteditable="true" class="editable" onclick="editInfo(@eventItem.Id)" id="info_@eventItem.Id">
                                    <text>@eventItem.EventInformation</text>
                                    <input type="submit" id="submit_info_@eventItem.Id" value="@eventItem.Id" hidden/>
                                </form>
                            </td>
                            <td>
                                <form method="post" asp-controller="Event" asp-action="DeleteEvent">
                                    <input type="submit" id="submit_@eventItem.Id" name="eventId" value="@eventItem.Id" hidden/>
                                    <button id="delete-event-button" type="button"class="buttons" onclick="deleteEvent(@eventItem.Id)">Delete</button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="calendar-buttons">
            <!-- Button to trigger modal -->
            <button type="button" onclick = "setCurrentDateTime()" class="buttons form-buttons" data-bs-toggle="modal" data-bs-target="#addEventModal">
                Add New Event
            </button>
            <button type="button" id="togglePastEvents" class="buttons form-buttons">
                Show/Hide Past Events
            </button>
        </div> <!-- close calendar-buttons -->
    </div> <!-- close calendar-container -->
    

    <div class="embed-reports-container">
        <h3>Placeholder for Docusign and Snipe-IT report embed</h3>
    </div>


    <!-- Modal for adding new event -->
    <div class="modal fade" id="addEventModal" tabindex="-1" aria-labelledby="addEventModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addEventModalLabel">Add New Event</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Form that posts to the EventController's AddEvent action -->
                    <form id="AddEventForm" asp-controller="Event" asp-action="AddEvent" method="post">
                        <div class="form-group">
                            <label asp-for="NewEvent.EventTime" class="control-label">Event Time</label>
                            <input asp-for="NewEvent.EventTime" class="form-control" type="datetime-local" id="eventTimeInput" />
                            <span asp-validation-for="NewEvent.EventTime" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="NewEvent.EventInformation" class="control-label">Event Information</label>
                            <input asp-for="NewEvent.EventInformation" class="form-control" placeholder="Enter Event Info" />
                            <span asp-validation-for="NewEvent.EventInformation" class="text-danger"></span>
                        </div>
                        <button type="submit" onclick = "" class="btn btn-primary">Add Event</button>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</body>

@section Scripts {
    <!-- JQuery and Bootstrap JS from CDN -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Chart.js from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Site-specific JavaScript -->
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    <!-- Validation Scripts Partial -->
    <partial name="_ValidationScriptsPartial" />

    <!-- Script to set the default date and time in the event time input -->
    <script>
        $(document).ready(function () {
            function setCurrentDateTime() {
                const now = new Date();
                const year = now.getFullYear();
                const month = ('0' + (now.getMonth() + 1)).slice(-2);
                const day = ('0' + now.getDate()).slice(-2);
                const hours = ('0' + now.getHours()).slice(-2);
                const minutes = ('0' + now.getMinutes()).slice(-2);

                const formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
                $('#eventTimeInput').val(formattedDateTime);
            }

            setCurrentDateTime();

            // Set the current date and time when the modal is opened
            $('#addEventModal').on('shown.bs.modal', setCurrentDateTime);
        });

        function setCurrentDateTime() {
            const now = new Date();
            const year = now.getFullYear();
            const month = ('0' + (now.getMonth() + 1)).slice(-2);
            const day = ('0' + now.getDate()).slice(-2);
            const hours = ('0' + now.getHours()).slice(-2);
            const minutes = ('0' + now.getMinutes()).slice(-2);

            const formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
            $('#eventTimeInput').val(formattedDateTime);

            // Set the minimum date and time to current date and time
            $('#eventTimeInput').attr('min', formattedDateTime);
        }

        $('AddEventForm').submit(function (event) {
            const selectedDateTime = new Date($('#eventTimeInput').val());
            const currentDateTime = new Date();

            if (selectedDateTime < currentDateTime) {
                alert('Please select a date and time that is after the current date and time.');
                event.preventDefault(); // Prevent form submission
            }
        });

        $(document).ready(function () {
             // Toggle button click event
            $('#togglePastEvents').click(function () {
            $('.past-event').toggle(); // Toggle visibility of past events
        });
        });
        function editInfo(eventId) {
            console.log("info_" + eventId + " clicked");

            // Get the element that called function
            var target = "info_" + eventId;
            var textArea = document.getElementById(target);
            // Add event listener for Enter key
            textArea.addEventListener('keypress', function(event) {
                if (event.key === "Enter") {
                    // Prevent enter key from inserting line break
                    event.preventDefault();
                    // Get the new text
                    var newText = textArea.querySelector('text').textContent;
                    console.log(newText);

                    // Submit the form
                    var submitTarget = "#submit_info_" + eventId;
                    var submitButton = document.querySelector(submitTarget);
                    console.log(submitButton.value);
                    submitButton.click();

                }
            });

        }


        function editEventDate(td) {
            var currentValue = td.innerText.trim();

            var newDateInput = document.createElement('input');
            newDateInput.type = 'datetime-local';
            newDateInput.value = currentValue;

            td.innerText = '';
            td.appendChild(newDateInput);

            newDateInput.focus();

            newDateInput.addEventListener('change', function() {
                var newValue = newDateInput.value.trim();
        
                // Get eventId from the parent tr or pass it to this function explicitly
                var eventId = td.closest('tr').getAttribute('data-event-id');

                // const month = String(newValue.getMonth() + 1).padStart(2, '0'); 
                // const day = String(newValue.getDate()).padStart(2, '0');
                // const year = newValue.getFullYear();

                // formattedDate = `${month}/${day}/${year}`;

                td.innerText = newValue;

                var formData = new FormData();
                formData.append('eventId', eventId);
                formData.append('updatedEventTime', newValue);

                fetch('/Event/UpdateEventTime', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    console.log('Event updated successfully');
                    window.location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            });
        }

        function editEventInformation(td) 
        {
            // Save the current content of the td
            var currentValue = td.innerText.trim();

            // Get the event ID from the parent tr
            var eventId = td.closest('tr').getAttribute('data-event-id');

            // Create an input field
            var input = document.createElement('input');
            input.type = 'text';
            input.value = currentValue;

            // Replace the td content with the input
            td.innerText = '';
            td.appendChild(input);

            // Focus on the input field
            input.focus();

            // Handle input blur to save changes
            input.addEventListener('blur', function() {
                // Get updated value
                var newValue = input.value.trim();


                if (newValue.trim() === "")
                {
                    td.removeChild(input);
                    td.innerText = currentValue;
                    return;
                }

                // Display updated value in the table
                td.innerText = newValue;

                // Send a POST request to update the event
                var formData = new FormData();
                formData.append('eventId', eventId);
                formData.append('updatedEventInformation', newValue);

                fetch('/Event/UpdateEventInformation', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    console.log('Event updated successfully');
                })
                .catch(error => {
                    console.error('Error:', error);
                });
            });
        }

        function deleteEvent(eventId) {
            if (confirm('Are you sure you want to delete this event?')) {
                // Perform the delete action here, similar to your previous function
                var target = "submit_" + eventId;
                document.getElementById(target).click();
            }
        }

    </script>
}
