@model QADraft.ViewModels.CombinedEventsViewModel

@{
    ViewData["Title"] = "Home Page";
    Layout = ViewBag.Layout;
    string userRole = ViewBag.role;
}
<body onload="EmbedLoad()"></body>

<div class="text-center">
    <h1 class="display-4">Welcome, @Context.Session.GetString("FirstName")!</h1>
</div>

<!-- Side bar that contains external links -->
    <div class="link-bar">
        <!-- Each link has an image imbedded into them. The links will open in a new tab. -->
        <a class="link" title="Open All" href="" onclick="openAll()"><img src="~/images/open-all.png"></a> <!-- Shortcut to open all external links at once -->

        <a class="link" title="Argos" href="https://ethosid.eku.edu/cas/login?service=https%3A%2F%2Fargosp.eku.edu%2Findex.html#_ga=2.127587661.1799644479.1720011051-1843477414.1720011051" target="_blank" rel="noopener noreferrer"><img src="~/images/argosLogo.png" alt="Argos"></a>
        <a class="link" title="Asana" href="https://app.asana.com/-/login?_gl=1*lpkqvz*_ga*MjM4ODA2MDE5LjE3MTY0NzUyMjQ.*_ga_J1KDXMCQTH*MTcxNjQ3NTIyNC4xLjEuMTcxNjQ3NTIyNC42MC4wLjEwNTc1MjYwMTA.*_fplc*bjdDRk1QMTklMkZaaXpyMlo4NUkwaVVBcFRxWW5aQzFySXQ5JTJCaUo1QjFTOGdiWDNOSUhUMUMlMkJ1d1htb3NqNks2WmtkaG51ZVBuTjViQzFtUXoxRzhsUzlpMDZRVnY4b0JTTnFYYnBIaklwRlFBcUpBS3MxdnZXNTJjNVZta1V3JTNEJTNE" target="_blank"><img src="~/images/asanaLogo.png" alt="Asana"></a>
        <a class="link" title="Slate" href="https://success.eku.edu/manage#_ga=2.141525106.1904089785.1732549462-1349139450.1724001377" target="_blank"><img src="~/images/slateLogo.png" alt="Slate"></a>
        @* <a class="link" title="Discord" href="https://discord.com/login" target="_blank"><img src="~/images/discordLogo.png" alt="Discord"></a> *@
        <a id="docusign-link" class="link" title="Docusign" href="https://account.docusign.com/oauth/auth?response_type=code&scope=all%20click.manage%20me_profile%20room_forms%20room_fields%20inproductcommunication_read%20data_explorer_signing_insights%20notary_read%20notary_write%20search_read%20search_write%20webforms_manage%20dtr%20valmod_manage%20signature&client_id=2CC56DC9-4BCD-4B55-8AB0-8BA60BAE1065&redirect_uri=https%3A%2F%2Fapps.docusign.com%2Fauthenticate&state=%7B%22widgetId%22%3A%22%40ds%2Fsend%22%2C%22xsrfToken%22%3A%22tKVf99o%2B5aaZ0d%2Bc8bp%2B%2B5D9h0qXk3IZT799yTuMknkDgNACnVPzjWynA8zxlH%2FKIcVY2vtAfu6vzo%2BvLGg8avfd%2FKn379N4HWJwxhDyHT9prk2TNzaSpmqvqllpphw7fvcWONPy47J216fgi2XsYgvYUXDY07kT4oYZGwDU6ks%3D%22%2C%22redirectUri%22%3A%22%2Fsend%22%7D" target="_blank"><img src="~/images/docusignLogo.png" alt="Docusign"></a>
        <a class="link" title="Google Drive" href="https://www.google.com/intl/en-US/drive/" target="_blank"><img src="~/images/driveLogo.png" alt="Google Drive"></a>
        <a class="link" title="Outlook" href="https://it.eku.edu/mso365" target="_blank"><img src="~/images/outlookLogo.png" alt="Outlook"></a>
        <a class="link" title="Snipe-IT" href="https://itservice6.eku.edu/login" target="_blank"><img src="~/images/snipeitLogo.png" alt="Snipe-IT"></a>
        <a class="link" title="Blackboard" href="https://learn.eku.edu/" target="_blank"><img src="~/images/Blackboard.jpeg" alt="Blackboard"></a>
        <a class="link" title="Canvas" href="https://eku.instructure.com/login" target="_blank"><img src="~/images/Canvas.png" alt="Canvas"></a>
        <a class="link" id="help-link" title="Help" href="https://docs.google.com/document/d/1mkzdgdh4_moWugLptXcuLwo0DV9lP9MwQMLhCXnE5SQ/edit?usp=sharing" target="_blank"><img src="~/images/helpIcon.png" alt="Help"></a>
    </div>
    <script>
        // JS for link-shortcut options. window.open() will open the given link in a new tab
        function openAll(){
            window.open("https://argosp.eku.edu/Argos/AWV/#explorer/Geeks/Equipment%20Checkout", "_blank");
            window.open("https://discord.com/login", "_blank");
            window.open("https://app.asana.com/-/login?_gl=1*lpkqvz*_ga*MjM4ODA2MDE5LjE3MTY0NzUyMjQ.*_ga_J1KDXMCQTH*MTcxNjQ3NTIyNC4xLjEuMTcxNjQ3NTIyNC42MC4wLjEwNTc1MjYwMTA.*_fplc*bjdDRk1QMTklMkZaaXpyMlo4NUkwaVVBcFRxWW5aQzFySXQ5JTJCaUo1QjFTOGdiWDNOSUhUMUMlMkJ1d1htb3NqNks2WmtkaG51ZVBuTjViQzFtUXoxRzhsUzlpMDZRVnY4b0JTTnFYYnBIaklwRlFBcUpBS3MxdnZXNTJjNVZta1V3JTNEJTNE");
            window.open("https://account.docusign.com/oauth/auth?response_type=code&scope=all%20click.manage%20me_profile%20room_forms%20room_fields%20inproductcommunication_read%20data_explorer_signing_insights%20notary_read%20notary_write%20search_read%20search_write%20webforms_manage%20dtr%20valmod_manage%20signature&client_id=2CC56DC9-4BCD-4B55-8AB0-8BA60BAE1065&redirect_uri=https%3A%2F%2Fapps.docusign.com%2Fauthenticate&state=%7B%22widgetId%22%3A%22%40ds%2Fsend%22%2C%22xsrfToken%22%3A%22tKVf99o%2B5aaZ0d%2Bc8bp%2B%2B5D9h0qXk3IZT799yTuMknkDgNACnVPzjWynA8zxlH%2FKIcVY2vtAfu6vzo%2BvLGg8avfd%2FKn379N4HWJwxhDyHT9prk2TNzaSpmqvqllpphw7fvcWONPy47J216fgi2XsYgvYUXDY07kT4oYZGwDU6ks%3D%22%2C%22redirectUri%22%3A%22%2Fsend%22%7D");
            window.open("https://www.google.com/intl/en-US/drive/");
            window.open("https://it.eku.edu/mso365");
            window.open("https://itservice6.eku.edu/login");
            window.open("https://learn.eku.edu/");
            window.open("https://eku.instructure.com/login");
        }

        function applyEventColor(id, eventColor) {
           var colorSpan = document.getElementById('event-color-span-' + id);
           colorSpan.style.backgroundColor = eventColor;
        }
    </script>

<body class="dashboard">
    <div class="calendar-container">
        <h4>Event Calendar</h4>
        <div class="calendar">
            <table class="event-calendar">
                <thead>
                    <tr id="table-header-record">
                        <th>Event Time</th>
                        <th>Event Information</th>
                        @if (userRole == "Geek") @*Check that the user is not a Geek. The Geek view will not present actions so the header should not be made*@
                        { 
                            @* If the user is a Geek, create a blank column so that the header bar displays properly *@
                            <th></th>
                        }
                        else 
                        {
                            @* If the user is not a Geek, display the calendar with the actions header *@
                            <th>Actions</th>
                        }
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var eventItem in Model.EventsViewModel.EventList.OrderBy(e => e.EventTime))
                    {
                        var isPastEvent = eventItem.EventTime < DateTime.Now;
                        var date = eventItem.EventTime.ToString("MM/dd/yyyy");
                        var time = eventItem.EventTime.ToString("h:mm tt");

                        <tr id="event-record-@eventItem.Id" class="@if (isPastEvent) { <text>past-event</text> }" data-event-id="@eventItem.Id">
                            
                            <td class="table-event-time">
                                <input type="submit" id="submit_time_@eventItem.Id" name="id" value="@eventItem.Id" hidden/>
                                <text>@time <br/> @date</text>
                            </td>
                            <td>
                                <input type="submit" id="submit_info_@eventItem.Id" name="id" value="@eventItem.Id" hidden/>
                                <input type="text" id="text_info_@eventItem.Id" name="text" hidden />
                                <text>@eventItem.EventInformation</text>
                            </td>
                            <td class="table-event-actions">
                                @if (userRole != "Geek")
                                {
                                    var eventTime = eventItem.EventTime.ToString("s");
                                    <div class="form-container">
                                        <button class="buttons table-buttons" onclick="showEditEventModal('@eventItem.Id', '@eventTime', '@eventItem.EventInformation', '@eventItem.Color')">Edit</button>
                                        <form method="post" asp-controller="Event" asp-action="DeleteEvent">
                                            <div class="form-group">
                                                <input type="submit" id="submit_delete" name="eventId" value="@eventItem.Id" hidden/>
                                                <button id="delete-event-button" type="button" class="buttons table-buttons" onclick="openConfirmationDialog(event)">Delete</button>   
                                            </div>
                                        </form>
                                    </div>
                                }
                            </td>
                            <td id="table-event-color-@eventItem.Id" class="table-event-color" style="width: 75px;">
                                <span id="event-color-span-@eventItem.Id" class="event-color-span">

                                </span>
                            </td>

                            @if (!string.IsNullOrEmpty(eventItem.Color))
                            {
                                <script>
                                    console.log("apply");
                                    applyEventColor('@eventItem.Id', '@eventItem.Color');
                                </script>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="calendar-buttons">
            <!-- Button to trigger modal -->
            @if (userRole != "Geek") @*Check that the user is not a Geek. Geeks should not be able to edit calendar*@
            {
            <button type="button" id="newEventButton" onclick = "setCurrentDateTime()" class="buttons form-buttons" data-bs-toggle="modal" data-bs-target="#addEventModal">
                Add New Event
            </button>
            }
            <button type="button" id="togglePastEvents" class="buttons form-buttons">
                <b>Show</b>/Hide Past Events
            </button>
        </div> <!-- close calendar-buttons -->
    </div> <!-- close calendar-container -->


    @* <div class="embed-reports-container" id="embed-reports-container">
            <div class="loader"></div> 
     *@</div>

    <!-- Modal for adding new event -->
    <div class="modal fade" id="addEventModal" tabindex="-1" aria-labelledby="addEventModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addEventModalLabel">Add New Event</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="AddEventForm" asp-controller="Event" asp-action="AddEvent" method="post">
                    <div class="modal-body">
                        <!-- Form that posts to the EventController's AddEvent action -->
                        <div class="form-group">
                            <label asp-for="NewEvent.EventTime" class="control-label">Event Time</label>
                            <input asp-for="NewEvent.EventTime" class="form-control" type="datetime-local" id="eventTimeInput" />
                            <span asp-validation-for="NewEvent.EventTime" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="NewEvent.EventInformation" class="control-label">Event Information</label>
                            <input asp-for="NewEvent.EventInformation" class="form-control" placeholder="Enter Event Info" id="add-event-info-input" />
                            <span asp-validation-for="NewEvent.EventInformation" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="NewEvent.Color" id="add-event-color-label" class="control-label">Color</label>
                            <div class="color-input-container">
                                <input asp-for="NewEvent.Color" id="add-event-color-input" hidden />
                                <input id="add-color-input" type="color" onchange="setColorInput('AddEvent', this.value)" hidden/>
                                <input type="button" class="buttons" onclick="setColorInput('AddEvent', '#FF0000')" style="background-color: #FF0000;" />
                                <input type="button" class="buttons" onclick="setColorInput('AddEvent', '#FFA500')" style="background-color: #FFA500;" />
                                <input type="button" class="buttons" onclick="setColorInput('AddEvent', '#FFFF00')" style="background-color: #FFFF00;" />
                                <input type="button" class="buttons" onclick="setColorInput('AddEvent', '#03b703')" style="background-color: #03b703;" />
                                <input type="button" class="buttons" onclick="setColorInput('AddEvent', '#2c2cff')" style="background-color: #2c2cff;" />
                                <input type="button" class="buttons" onclick="setColorInput('AddEvent', '#6600b0')" style="background-color: #6600b0;" />
                                <input type="button" class="buttons" onclick="setColorInput('AddEvent', '#EE82EE')" style="background-color: #EE82EE;" />
                            </div>
                            <div class="color-input-container">
                                <input type="button" class="buttons" onclick="setColorInput('AddEvent', '#FFFFFF')" style="background-color: #FFFFFF;" />
                                <input type="button" class="buttons" onclick="setColorInput('AddEvent', '#000000')" style="background-color: #000000;" />
                                <input type="button" class="buttons rainbow-gradient" onclick="document.getElementById('add-color-input').click();" />
                            </div>
                            <div class="color-input-container">
                                <button class="buttons table-buttons" onclick="removeEventColor('AddEvent')">Default Color</button>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" onclick="" class="buttons">Add Event</button>
                        <span></span>
                        <button type="button" class="buttons" data-bs-dismiss="modal">Close</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</body>

<!-- Modal Popup for Delete Event confirmation -->
<dialog id="dialog" class="dialog-popups">
	<div class="confirmation-content">
        <!-- Confirmation text -->
        <p>Are you sure you want to delete this Event?</p>
        <!-- Confirmation button container -->
        <div class="confirmation-buttons">
            <!-- Confirmation buttons. Yes will call confirmDelete which will trigger 
            the deleteButton input. No will close the confirmation dialog -->
            <button id="confirm-delete-event-button" class="buttons" onclick="deleteEvent()">Yes</button> 
            <button id="cancel-delete-event-button" class="buttons buttons-accent" onclick="window.dialog.close();">No</button>
        </div>
    </div>
	<button onclick="window.dialog.close();" class="x">❌</button>
</dialog>


<!-- Modal Popup for Edit Event -->
<dialog id="dialog-edit-event" class="dialog-popups">
	<div class="confirmation-content">
        <!-- Confirmation text -->
        <h2>Edit Event<h2>
        <form id="edit-event-form" asp-controller="Event" asp-action="EditEvent" method="post">
            <div class="form-group">
                <label class="control-label popup-labels">Event Time</label>
                <input name="EventTime" class="form-control" type="datetime-local" id="edit-event-time-input" />
            </div>
            <div class="form-group">
                <label class="control-label popup-labels">Event Information</label>
                <input name="EventInformation" class="form-control" placeholder="Enter Event Info" id="edit-event-info-input"/>
            </div>
            <div>
                <button id="edit-colors-button" class="buttons table-buttons" onclick="toggleColors()">Edit Colors</button>
            <div>
            <div id="edit-colors-div" class="form-group">
                <label id="event-color-label" class="control-label popup-labels">Color</label>
                <div class="color-input-container">
                    <input id="edit-event-color-input" name="Color" hidden />
                    <input id="edit-color-input" type="color" onchange="setColorInput('EditEvent', this.value)" hidden/>
                    <input type="button" class="buttons" onclick="setColorInput('EditEvent', '#FF0000')" style="background-color: #FF0000;" />
                    <input type="button" class="buttons" onclick="setColorInput('EditEvent', '#FFA500')" style="background-color: #FFA500;" />
                    <input type="button" class="buttons" onclick="setColorInput('EditEvent', '#FFFF00')" style="background-color: #FFFF00;" />
                    <input type="button" class="buttons" onclick="setColorInput('EditEvent', '#03b703')" style="background-color: #03b703;" />
                    <input type="button" class="buttons" onclick="setColorInput('EditEvent', '#2c2cff')" style="background-color: #2c2cff;" />
                    <input type="button" class="buttons" onclick="setColorInput('EditEvent', '#6600b0')" style="background-color: #6600b0;" />
                    <input type="button" class="buttons" onclick="setColorInput('EditEvent', '#EE82EE')" style="background-color: #EE82EE;" />
                </div>
                <div class="color-input-container">
                    <input type="button" class="buttons" onclick="setColorInput('EditEvent', '#FFFFFF')" style="background-color: #FFFFFF;" />
                    <input type="button" class="buttons" onclick="setColorInput('EditEvent', '#000000')" style="background-color: #000000;" />
                    <input type="button" class="buttons rainbow-gradient" onclick="document.getElementById('edit-color-input').click();" />
                 </div>
                 <div class="color-input-container">
                    <button class="buttons table-buttons" onclick="removeEventColor('EditEvent')">Default Color</button>
                 </div>
            </div>
        </form>
        <!-- Confirmation button container -->
        <div class="confirmation-buttons">
            <!-- Confirmation buttons. Yes will call confirmDelete which will trigger 
            the deleteButton input. No will close the confirmation dialog -->
            <button id="confirm-edit-event-button" type="button" class="buttons" onclick="editEvent()">Confirm Edits</button> 
            <button id="cancel-edit-event-button" type="button" class="buttons buttons-accent" onclick="closeEditEventModal()">Cancel</button>
        </div>
    </div>
	<button onclick="document.getElementById('dialog-edit-event').close();" class="x">❌</button>
</dialog>


@section Scripts {
    <!-- JQuery and Bootstrap JS from CDN -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Chart.js from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Site-specific JavaScript -->
    <script src="~/js/site.js" asp-append-version="true"></script>
    
    <!-- Validation Scripts Partial -->
    <partial name="_ValidationScriptsPartial" />

    <!-- Script to set the default date and time in the event time input -->
    <script>
        $(document).ready(function () {
            function setCurrentDateTime() {
                const now = new Date();
                const year = now.getFullYear();
                const month = ('0' + (now.getMonth() + 1)).slice(-2);
                const day = ('0' + now.getDate()).slice(-2);
                const hours = ('0' + now.getHours()).slice(-2);
                const minutes = ('0' + now.getMinutes()).slice(-2);

                const formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
                $('#eventTimeInput').val(formattedDateTime);
            }

            setCurrentDateTime();

            // Set the current date and time when the modal is opened
            $('#addEventModal').on('shown.bs.modal', setCurrentDateTime);
        });


        // function setCurrentDateTime() {
        //     const now = new Date();
        //     const year = now.getFullYear();
        //     const month = ('0' + (now.getMonth() + 1)).slice(-2);
        //     const day = ('0' + now.getDate()).slice(-2);
        //     const hours = ('0' + now.getHours()).slice(-2);
        //     const minutes = ('0' + now.getMinutes()).slice(-2);

        //     const formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
        //     $('#eventTimeInput').val(formattedDateTime);
        // }

        //     Set the current date and time when the modal is opened
        //     $('#addEventModal').on('shown.bs.modal', setCurrentDateTime);
        // });

        

        $('AddEventForm').submit(function (event) {
            const selectedDateTime = new Date($('#eventTimeInput').val());
            const currentDateTime = new Date();

            if (selectedDateTime < currentDateTime) {
                alert('Please select a date and time that is after the current date and time.');
                event.preventDefault(); // Prevent form submission
            }
        });

        function EmbedLoad() {
            console.log("embed load")

            // Toggle the visibility of past events to false on page load
            $('.past-event').toggle();
            var pastEventsVisible = false

             // Create event listener for toggle button
            $('#togglePastEvents').click(function () {
                $('.past-event').toggle(); // Toggle visibility of past events
                // Get the current state
                pastEventsVisible = !pastEventsVisible;
                // Based on the visibility, change the toggle buttont text
                if (pastEventsVisible) {

                    $('#togglePastEvents').html("Show/<span style='font-weight: bold;'>Hide</span> Past Events");
                }
                else {
                    $('#togglePastEvents').html("<span style='font-weight: bold;'>Show</span>/Hide Past Events");
                }

            });

            // Get the current year
            var currentYear = new Date().getFullYear();
            var yearStartDate = new Date(currentYear, 0, 1).toISOString();    //Jan 1st
            var yearEndDate = new Date(currentYear, 11, 31).toISOString();    //Dec 31st


            // // Load SnipeIt view component
            // var _url = '@Url.Action("GetSnipeit", "Home")';
            // $.ajax({
            //     type: "GET",
            //     url: _url,
            //     data: { startDate: yearStartDate, endDate: yearEndDate}, // Pass the start/end date and an empty array for the data
            //     success: function (result) {
            //         // Save the fetched html to the div holding the embed
            //         $("#embed-reports-container").html(result);
            //     },
            //     error: function (xhr, status, error) {
            //         console.error("Error fetching Snipe-IT data (Index):", error);
            //     }
            // });
        }


        // Function called by the delete button to open confirmation modal
        function openConfirmationDialog(event) {
            event.preventDefault(); // Prevent default behavior
            
            // Get the correct form to be submitted
            var parentForm = event.target.closest('form');
            window.currentForm = parentForm;
            // Show the modal
            window.dialog.showModal();
        }


        function deleteEvent(eventId) {
           // Using the form we saved in openConfirmationDialog(), use .click() on the form input to delete the QA
            window.currentForm.querySelector('input[type="submit"][id="submit_delete"]').click();
            // If for some reason the page does not change, close the popup and return false (serves to close the function)
            window.dialog.close();
            return false;
        }

        function showEditEventModal(eventId, eventTime, eventInfo, eventColor) {

            console.log("showEditEventModal");

            var editEventForm = document.getElementById('edit-event-form');
            var editTimeInput = document.getElementById('edit-event-time-input');
            var editInfoInput = document.getElementById('edit-event-info-input');
            var editColorInput = document.getElementById('edit-color-input');

            var idInput = document.createElement('input');
            idInput.setAttribute('type', 'hidden');
            idInput.setAttribute('name', 'Id');
            idInput.setAttribute('value', eventId);

            editEventForm.appendChild(idInput);

            editTimeInput.value = eventTime;
            editInfoInput.value = eventInfo;
            editInfoInput.style.backgroundColor = eventColor;
            editColorInput.value = eventColor;

            const dialogEditEvent = document.getElementById('dialog-edit-event');
            dialogEditEvent.showModal();
        }

        function editEvent() {
            var editEventForm = document.getElementById('edit-event-form');

            editEventForm.submit();
        }

        function closeEditEventModal() {
            var editTimeInput = document.getElementById('edit-event-time-input');
            var editInfoInput = document.getElementById('edit-event-info-input');
            var editColorInput = document.getElementById('edit-color-input');
            var editColorsDiv = document.getElementById('edit-colors-div');
            const dialogEditEvent = document.getElementById('dialog-edit-event');

            editTimeInput.value = ''
            editInfoInput.value = '';
            editColorInput.value = '#00000';
            editColorsDiv.style.display = 'none';

            dialogEditEvent.close();
        }

        function removeEventColor(whichForm) {
            event.preventDefault();

            if (whichForm === 'AddEvent') {
                var colorInput = document.getElementById('add-event-color-input');
                var infoInput = document.getElementById('add-event-info-input');
            }
            else {
                var colorInput = document.getElementById('edit-event-color-input');
                var infoInput = document.getElementById('edit-event-info-input');
            }



            var userTheme = '@Context.Session.GetString("Theme")';

            if (userTheme === "dark") {
                colorInput.value = "#4A4A4A";
                infoInput.style.backgroundColor = "#4A4A4A";
            }
            else {
                colorInput.value = "#F5F5F5";
                infoInput.style.backgroundColor = "#F5F5F5";
            }
        }

        function setColorInput(whichForm, newColor) {
            if (whichForm == "AddEvent")
            {
                var colorInput = document.getElementById('add-event-color-input');
                var informationInput = document.getElementById('add-event-info-input');
            }
            else
            {
                var colorInput = document.getElementById('edit-event-color-input');
                var informationInput = document.getElementById('edit-event-info-input');
            }

            informationInput.style.backgroundColor = newColor;
            colorInput.value = newColor;

            console.log("whichForm = " + whichForm);
            console.log("newColor = " + newColor);
            console.log("colorInput.value = " + colorInput.value);
        }

        function toggleColors() {
            event.preventDefault();

            var editColorsDiv = document.getElementById('edit-colors-div');

            editColorsDiv.style.display = "block";
        }
    </script>
}
