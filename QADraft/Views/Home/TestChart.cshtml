@{
    var categoryDict = ViewBag.categoryDict as Dictionary<string, int>;
    var natureDict = ViewBag.natureDict as Dictionary<string, int>;

    // Print out categoryDict
    <h2>Category Dictionary:</h2>
    <ul>
        @foreach (var pair in categoryDict)
        {
            <li>@pair.Key: @pair.Value</li>
        }
    </ul>

    // Print out natureDict
    <h2>Nature Dictionary:</h2>
    <ul>
        @foreach (var pair in natureDict)
        {
            <li>@pair.Key: @pair.Value</li>
        }
    </ul>
}


<head>
    <title>d3 test</title>
    <!-- Load j3.js -->
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <!-- Load the chromatic color scale-->
    <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
</head>
<div id="container">
    <!-- Add buttons to swap between data sources -->
    <button onclick="update(data1)">Category</button>
    <button onclick="update(data2)">Nature</button>



    <script>
        // set the dimensions and margins of the graph
        var width = 650
            height = 650
            margin = 200

        // The radius of the pieplot is half the width or half the height (smallest one)
        var radius = Math.min(width, height) / 2 - margin

        // append the svg object to the div "container"
        var svg = d3.select("#container")
            .append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        // create data sets
        var data1 = @Html.Raw(Json.Serialize(ViewBag.categoryDict));
        var data2 = @Html.Raw(Json.Serialize(ViewBag.natureDict));

        // set the color scale
        var color = d3.scaleOrdinal()
            .range(d3.schemeDark2);

        // A function that create / update the plot for a given variable:
        function update(data) {
            // Compute the position of each group on the pie:
            var pie = d3.pie()
            .value(function(d) {return d.value; })
            .sort(function(a, b) { console.log(a) ; return d3.ascending(a.key, b.key);} ) // This make sure that group order remains the same in the pie chart
            var data_ready = pie(d3.entries(data))

            // map to data
            var u = svg.selectAll("path")
            .data(data_ready)
            
            // Update the color domain based on the current data
            color.domain(Object.keys(data));

            // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
            u
                .enter()
                .append('path')
                .merge(u)
                .transition()
                .duration(1000)
                .attr('d', d3.arc()
                    .innerRadius(0)
                    .outerRadius(radius)
                )
                .attr('fill', function(d){ return(color(d.data.key)) })
                .attr("stroke", "white")
                .style("stroke-width", "2px")
                .style("opacity", 1)
        
            // remove the group that is not present anymore
            u
                .exit()
                .remove()


            // Remove existing labels and lines
            svg.selectAll('.label').remove();
            svg.selectAll('.line').remove();

            // Add labels and lines to pie slices
            var label = svg.selectAll('.label')
                .data(data_ready)
                .enter()
                .append('text')
                .attr('class', 'label')
                .text(function (d) { return d.data.key; }) // Label with the key
                .attr('transform', function (d) {
                    var pos = d3.arc()
                        .innerRadius(radius * 1.5) // Adjust the position of labels
                        .outerRadius(radius * 1.7) // Adjust the position of labels
                        .centroid(d);
                    return 'translate(' + pos + ')';
                })
                .style('text-anchor', 'middle')
                .style('font-size', '12px');

            var line = svg.selectAll('.line')
                .data(data_ready)
                .enter()
                .append('line')
                .attr('class', 'line')
                .attr('x1', function (d) {
                    var centroid = d3.arc().innerRadius(radius * 0.7).outerRadius(radius * 0.7).centroid(d);
                    var labelPos = d3.arc().innerRadius(radius * 1.5).outerRadius(radius * 1.7).centroid(d);
                    var dx = (labelPos[0] - centroid[0]) / 2; // Half the distance between centroid and label
                    return centroid[0] + dx;
                })
                .attr('y1', function (d) {
                    var centroid = d3.arc().innerRadius(radius * 0.7).outerRadius(radius * 0.7).centroid(d);
                    var labelPos = d3.arc().innerRadius(radius * 1.5).outerRadius(radius * 1.7).centroid(d);
                    var dy = (labelPos[1] - centroid[1]) / 2; // Half the distance between centroid and label
                    return centroid[1] + dy;
                })
                .attr('x2', function (d) { return d3.arc().innerRadius(radius * 1.5).outerRadius(radius * 1.7).centroid(d)[0]; })
                .attr('y2', function (d) { return d3.arc().innerRadius(radius * 1.5).outerRadius(radius * 1.7).centroid(d)[1]; })
                .style('stroke', 'black');
        
        }

        // Initialize the plot with the first dataset
        update(data1)

    </script>

</div>