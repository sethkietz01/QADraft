@model GeekQA

@{
    Layout = ViewBag.Layout;
}

<head>
    <title id="page-title">QA</title>
    <!-- Load naturemapping from NatureMap.js-->
    <script src="~/js/NatureMap.js"></script>
</head>
<h2 id="title">QA</h2>

<!-- Form to get updated information on the selected user -->
<form id="form-items" asp-action="EditQA" method="post">
    <div asp-validation-summary="All" class="text-danger"></div>
    <input type="hidden" asp-for="Id" />
    <div class="form-group">
        <label asp-for="CommittedById" class="control-label"></label>
        <select id="commitedSelect" asp-for="CommittedById" class="form-control disabled-input" asp-items="Model.Users"></select>
        <span asp-validation-for="CommittedById" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="FoundById" class="control-label"></label>
        <select id="foundSelect" asp-for="FoundById" class="form-control" asp-items="Model.Coordinators"></select>
        <span asp-validation-for="FoundById" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="CategoryOfError" class="control-label">Category of Error</label>
        <select asp-for="CategoryOfError" class="form-control" id="categorySelect">
            <option class="placeholder" value="" disabled selected>Select Category</option>
            <!-- Populate categories dynamically with JavaScript -->
        </select>
        <span asp-validation-for="CategoryOfError" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="NatureOfError" class="control-label">Nature of Error</label>
        <select asp-for="NatureOfError" class="form-control" id="natureSelect">
            <option class="placeholder" value="" disabled selected>Select Nature</option>
            <!-- Populate natures dynamically with JavaScript -->
        </select>
        <span asp-validation-for="NatureOfError" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Severity" class="control-label"></label>
        <input type="text" asp-for="Severity" class="form-control disabled-input" id="severityInput" readonly />
        <span asp-validation-for="Severity" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="CustomerName" class="control-label"></label>
        <input asp-for="CustomerName" class="form-control" placeholder="If none, type N/A" />
        <span asp-validation-for="CustomerName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="UnitId" class="control-label"></label>
        <input asp-for="UnitId" class="form-control" placeholder="If none, type N/A" />
        <span asp-validation-for="UnitId" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="ErrorDate" class="control-label"></label>
        <input asp-for="ErrorDate" class="form-control" type="date" value="@Model.ErrorDate.ToString("yyyy-MM-dd")" />
        <span asp-validation-for="ErrorDate" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="FoundOn" class="control-label"></label>
        <input asp-for="FoundOn" class="form-control" type="date" />
        <span asp-validation-for="FoundOn" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Description" class="control-label"></label>
        <textarea asp-for="Description" class="form-control" placeholder="Describe the QA"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
    <div style="margin-top: 10px;">
        <button type="button" onclick="history.back()" class="buttons">Go Back</button>
        <button id="editBtn" type="button" onclick="edit()" class="buttons">Edit</button>
        <button id="viewBtn" type="button" onclick="view()" class="buttons">View</button>
        <input id="saveChanges" type="submit" value="Save Changes" class="buttons" />

         <input type="hidden" name="source" value="@ViewBag.source" />
    </div>

</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        // Load initial state as view
        view();

        function edit() {
            // Set the header text and page title
            document.getElementById("title").textContent = "Edit QA";
            document.title = "Edit QA";

            // Return to top of page
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });

            // Switch the show/edit button's visibility
            document.getElementById("editBtn").style.display = 'none' // Hide
            document.getElementById("viewBtn").style.display = 'inline-block' // Show

            // Show the save changes button
            document.getElementById("saveChanges").style.display = 'inline-block' // Show

            // Get the form element
            const form = document.getElementById('form-items');

            // Check if the form exists
            if (form) {
                // Get all form elements inside the form
                const elements = form.elements;

                // Convert the elements collection to an array
                const elementsArray = Array.from(elements);

                // Iterate through each element
                elementsArray.forEach(element => {
                    // Check if the element is an input, select, or textarea
                    if (element.tagName === 'INPUT' || element.tagName === 'SELECT' || element.tagName === 'TEXTAREA') {
                        // Enable the element
                        element.classList.remove("disabled-input");
                    }
                });
            }
        }

        function view() {
            // Set the header text
            document.getElementById("title").textContent = "View QA";
            document.title = "View QA";

            // Return to top of page
            window.scrollTo({
                top: 0,
                behavior: 'smooth'  // Optional: smooth scroll animation
            });

            // Switch the show/edit button's visibility
            document.getElementById("editBtn").style.display = 'inline-block' // Show
            document.getElementById("viewBtn").style.display = 'none' // Hide

            // Hide the save changes button
            document.getElementById("saveChanges").style.display = 'none' // Hide

            // Get the form element
            const form = document.getElementById('form-items');

            // Check if the form exists
            if (form) {
                // Get all form elements inside the form
                const elements = form.elements;

                // Convert the elements collection to an array
                const elementsArray = Array.from(elements);

                // Iterate through each element
                elementsArray.forEach(element => {
                    // Check if the element is an input, select, or textarea
                    if (element.tagName === 'INPUT' || element.tagName === 'SELECT' || element.tagName === 'TEXTAREA') {
                        // Disable the element
                        element.classList.add("disabled-input");
                    }
                });
            }

            var userRole = '@ViewBag.UserRole';
            var userName = '@ViewBag.UserName';

            // Check if the user is a Coordinator
            if (userRole == "Coordinator")
            {
                // Get the text of the commitedSelect element 
                var commitedById = document.getElementById("commitedSelect").options[commitedSelect.selectedIndex];;
                var commitedBy = commitedById.textContent;
                // Check if the CommitedBy name is the same as the user's name
                if (commitedBy == userName) {
                    // If it is, disable the Edit button
                    document.getElementById('editBtn').disabled = true;
                }
            }
        }

        var categories = Array.from(new Set(natureMapping.flatMap(m => m.categories)));
        
        document.addEventListener("DOMContentLoaded", function() {
            var categorySelect = document.getElementById("categorySelect");
            var natureSelect = document.getElementById("natureSelect");
            var severityInput = document.getElementById("severityInput");

            // Populate categories dropdown
            categories.forEach(function(category) {
                var option = document.createElement("option");
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });

            // Update nature options when category changes
            categorySelect.addEventListener("change", function() {
                var selectedCategory = categorySelect.value;
                natureSelect.innerHTML = '<option value="">Select Nature</option>'; // Reset natures
                severityInput.value = ''; // Reset severity

                if (selectedCategory) {
                    var natures = natureMapping.filter(m => m.categories.includes(selectedCategory));
                    natures.forEach(function(nature) {
                        var option = document.createElement("option");
                        option.value = nature.nature;
                        option.textContent = nature.nature;
                        option.dataset.severity = nature.severity;
                        natureSelect.appendChild(option);
                    });
                }
            });

            // Update severity when nature changes
            natureSelect.addEventListener("change", function() {
                var selectedOption = natureSelect.options[natureSelect.selectedIndex];
                severityInput.value = selectedOption.dataset.severity || '';
            });

            // Set initial values if editing
            categorySelect.value = "@Model.CategoryOfError";
            var initialNatures = natureMapping.filter(m => m.categories.includes("@Model.CategoryOfError"));
            initialNatures.forEach(function(nature) {
                var option = document.createElement("option");
                option.value = nature.nature;
                option.textContent = nature.nature;
                option.dataset.severity = nature.severity;
                natureSelect.appendChild(option);
            });
            natureSelect.value = "@Html.Raw(Model.NatureOfError)";
            severityInput.value = "@Html.Raw(Model.Severity)";

            var saveChanges = document.getElementById('saveChanges');

            saveChanges.addEventListener('click', function(event) {
                console.log('saveChanges');

                var customerName = document.getElementById("CustomerName");
                var unitId = document.getElementById("UnitId");

                // Automatically populate the customer name and unit ID with N/A if they are left blank
                if (! customerName.value)
                    customerName.value = "N/A";

                if (! unitId.value)
                    unitId.value = "N/A";
            });
        });

        
    </script>
}
