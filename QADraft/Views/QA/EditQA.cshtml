@model GeekQA

@{
    Layout = ViewBag.Layout;
}

<head>
    <title id="page-title">QA</title>
</head>
<h2 id="title">QA</h2>

<!-- Form to get updated information on the selected user -->
<form id="form-items" asp-action="EditQA" method="post">
    <div asp-validation-summary="All" class="text-danger"></div>
    <input type="hidden" asp-for="Id" />
    <div class="form-group">
        <label asp-for="CommittedById" class="control-label"></label>
        <select id="commitedSelect" asp-for="CommittedById" class="form-control" asp-items="Model.Users"></select>
        <span asp-validation-for="CommittedById" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="FoundById" class="control-label"></label>
        <select id="foundSelect" asp-for="FoundById" class="form-control" asp-items="Model.Coordinators"></select>
        <span asp-validation-for="FoundById" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="CategoryOfError" class="control-label"></label>
        <select id="categorySelect" asp-for="CategoryOfError" class="form-control" id="categorySelect">
            <option class="placeholder" value="" disabled selected>Select Category</option>
            <!-- Populate categories dynamically with JavaScript -->
        </select>
        <span asp-validation-for="CategoryOfError" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="NatureOfError" class="control-label"></label>
        <select id="natureSelect" asp-for="NatureOfError" class="form-control" id="natureSelect">
            <option class="placeholder" value="" disabled selected>Select Nature</option>
            <!-- Populate natures dynamically with JavaScript -->
        </select>
        <span asp-validation-for="NatureOfError" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Severity" class="control-label"></label>
        <input type="text" asp-for="Severity" class="form-control disabled-input" id="severityInput" readonly />
        <span asp-validation-for="Severity" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="CustomerName" class="control-label"></label>
        <input asp-for="CustomerName" class="form-control" placeholder="If none, type N/A" />
        <span asp-validation-for="CustomerName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="UnitId" class="control-label"></label>
        <input asp-for="UnitId" class="form-control" placeholder="If none, type N/A" />
        <span asp-validation-for="UnitId" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="ErrorDate" class="control-label"></label>
        <input asp-for="ErrorDate" class="form-control" type="date" value="@Model.ErrorDate.ToString("yyyy-MM-dd")" />
        <span asp-validation-for="ErrorDate" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="FoundOn" class="control-label"></label>
        <input asp-for="FoundOn" class="form-control" type="date" />
        <span asp-validation-for="FoundOn" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Description" class="control-label"></label>
        <textarea asp-for="Description" class="form-control" placeholder="Describe the QA"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
    <div style="margin-top: 10px;">
        <button type="button" onclick="history.back()" class="buttons">Go Back</button>
        <button id="editBtn" type="button" onclick="edit()" class="buttons">Edit</button>
        <button id="viewBtn" type="button" onclick="view()" class="buttons">View</button>
        <input id="saveChanges" type="submit" value="Save Changes" class="buttons" />

         <input type="hidden" name="source" value="@ViewBag.source" />
    </div>

</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        // Load initial state as view
        view();

        function edit() {
            // Set the header text and page title
            document.getElementById("title").textContent = "Edit QA";
            document.title = "Edit QA";

            // Return to top of page
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });

            // Switch the show/edit button's visibility
            document.getElementById("editBtn").style.display = 'none' // Hide
            document.getElementById("viewBtn").style.display = 'inline-block' // Show

            // Show the save changes button
            document.getElementById("saveChanges").style.display = 'inline-block' // Show

            // Get the form element
            const form = document.getElementById('form-items');

            // Disable 

            // Check if the form exists
            if (form) {
                // Get all form elements inside the form
                const elements = form.elements;

                // Convert the elements collection to an array
                const elementsArray = Array.from(elements);

                // Iterate through each element
                elementsArray.forEach(element => {
                    // Check if the element is an input, select, or textarea
                    if (element.tagName === 'INPUT' || element.tagName === 'SELECT' || element.tagName === 'TEXTAREA') {
                        // Enable the element
                        element.disabled = false;
                    }
                });
            }
        }

        function view() {
            // Set the header text
            document.getElementById("title").textContent = "View QA";
            document.title = "View QA";

            // Return to top of page
            window.scrollTo({
                top: 0,
                behavior: 'smooth'  // Optional: smooth scroll animation
            });

            // Switch the show/edit button's visibility
            document.getElementById("editBtn").style.display = 'inline-block' // Show
            document.getElementById("viewBtn").style.display = 'none' // Hide

            // Hide the save changes button
            document.getElementById("saveChanges").style.display = 'none' // Hide

            // Get the form element
            const form = document.getElementById('form-items');

            // Check if the form exists
            if (form) {
                // Get all form elements inside the form
                const elements = form.elements;

                // Convert the elements collection to an array
                const elementsArray = Array.from(elements);

                // Iterate through each element
                elementsArray.forEach(element => {
                    // Check if the element is an input, select, or textarea
                    if (element.tagName === 'INPUT' || element.tagName === 'SELECT' || element.tagName === 'TEXTAREA') {
                        // Disable the element
                        element.disabled = true;
                    }
                });
            }

            var userRole = '@ViewBag.UserRole';
            var userName = '@ViewBag.UserName';

            // Check if the user is a Coordinator
            if (userRole == "Coordinator")
            {
                // Get the text of the commitedSelect element 
                var commitedById = document.getElementById("commitedSelect").options[commitedSelect.selectedIndex];;
                var commitedBy = commitedById.textContent;
                // Check if the CommitedBy name is the same as the user's name
                if (commitedBy == userName) {
                    // If it is, disable the Edit button
                    document.getElementById('editBtn').disabled = true;
                }
            }
        }
        


        var natureMapping = [
            { nature: "Didn't check out asset at all (Not in SnipeIT)", categories: ["Snipe-It"], severity: "9", involves: "" },
            { nature: "Didn't update Snipe-It at all (Rechecks/Check ins)", categories: ["Snipe-It"], severity: "9", involves: "" },
            { nature: "Incorrect due date", categories: ["Snipe-It", "DocuSign"], severity: "6", involves: "" },
            { nature: "Didn't upload EULA", categories: ["Snipe-It"], severity: "6", involves: "" },
            { nature: "Didn't update status", categories: ["Snipe-It"], severity: "5", involves: "" },
            { nature: "Didn't comment in Snipe-It", categories: ["Snipe-It"], severity: "5", involves: "" },
            { nature: "Clicked edit asset instead of check-in/check-out", categories: ["DocuSign"], severity: "5", involves: "" },
            { nature: "Gave equipment and didn't start a checkout form", categories: ["DocuSign"], severity: "10", involves: "" },
            { nature: "Didn't complete EULA", categories: ["DocuSign"], severity: "10", involves: "" },
            { nature: "Didn't complete paperwork", categories: ["DocuSign"], severity: "7", involves: "" },
            { nature: "Didn't comment for swap", categories: ["DocuSign"], severity: "6", involves: "" },
            { nature: "Wrong unit ID", categories: ["DocuSign"], severity: "6", involves: "" },
            { nature: "Didn't send walk-in form", categories: ["DocuSign"], severity: "4", involves: "" },
            { nature: "On wrong step", categories: ["DocuSign"], severity: "3", involves: "" },
            { nature: "Checked out to someone on no checkout list", categories: ["Processes"], severity: "10", involves: "" },
            { nature: "Charged incorrect fees", categories: ["Processes"], severity: "10", involves: "" },
            { nature: "Did not check Docusign when setting Late Fees", categories: ["Processes"], severity: "10", involves: "" },
            { nature: "Checked in/out with missing items", categories: ["Processes"], severity: "8", involves: "" },
            { nature: "Didn't check ID", categories: ["Processes"], severity: "8", involves: "" },
            { nature: "Left student personal information open", categories: ["Processes"], severity: "8", involves: "" },
            { nature: "Didn't check for damages", categories: ["Processes"], severity: "8", involves: "" },
            { nature: "Checked out same laptop after a recheck", categories: ["Processes"], severity: "7", involves: "" },
            { nature: "Improper extension", categories: ["Processes"], severity: "7", involves: "" },
            { nature: "Didn't do reminder emails/courtesy calls", categories: ["Processes"], severity: "7", involves: "" },
            { nature: "Didn't clear SD card", categories: ["Processes"], severity: "5", involves: "" },
            { nature: "Didn't give password at checkout", categories: ["Processes"], severity: "5", involves: "" },
            { nature: "Didn't create footprint", categories: ["Processes"], severity: "4", involves: "" },
            { nature: "Didn't clean equipment", categories: ["Processes"], severity: "2", involves: "" },
            { nature: "Improper initials on tasks", categories: ["Processes"], severity: "2", involves: "" },
            { nature: "Tidiness/Cleanliness issue", categories: ["Processes"], severity: "2", involves: "" },
            { nature: "Didn't send late Fees", categories: ["Processes"], severity: "10", involves: "" },
            { nature: "Rechecked Equipment That Can't Be Rechecked", categories: ["Processes"], severity: "10", involves: "" },
            { nature: "Gross Misconduct", categories: ["Desk Conduct"], severity: "10", involves: "" },
            { nature: "No call/No show", categories: ["Desk Conduct"], severity: "10", involves: "" },
            { nature: "Unprofessional behavior", categories: ["Desk Conduct"], severity: "9", involves: "" },
            { nature: "Didn't Sign out", categories: ["Desk Conduct"], severity: "7", involves: "" },
            { nature: "Tardy", categories: ["Desk Conduct"], severity: "5", involves: "" },
            { nature: "Off-Task", categories: ["Desk Conduct"], severity: "4", involves: "" },
            { nature: "Forgot geek shirt", categories: ["Other"], severity: "5", involves: "" },
            { nature: "Time card", categories: ["Other"], severity: "5", involves: "" },
            { nature: "Forgot name tag", categories: ["Other"], severity: "3", involves: "" },
            { nature: "Improper communication", categories: ["Other"], severity: "1", involves: "" },
            { nature: "Loitering", categories: ["Other"], severity: "1", involves: "" },
            { nature: "Removed student from NCL shouldn't have", categories: ["Other"], severity: "10", involves: "Student" }
        ];

        var categories = Array.from(new Set(natureMapping.flatMap(m => m.categories)));
        
        document.addEventListener("DOMContentLoaded", function() {
            var categorySelect = document.getElementById("categorySelect");
            var natureSelect = document.getElementById("natureSelect");
            var severityInput = document.getElementById("severityInput");

            // Populate categories dropdown
            categories.forEach(function(category) {
                var option = document.createElement("option");
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });

            // Update nature options when category changes
            categorySelect.addEventListener("change", function() {
                var selectedCategory = categorySelect.value;
                natureSelect.innerHTML = '<option value="">Select Nature</option>'; // Reset natures
                severityInput.value = ''; // Reset severity

                if (selectedCategory) {
                    var natures = natureMapping.filter(m => m.categories.includes(selectedCategory));
                    natures.forEach(function(nature) {
                        var option = document.createElement("option");
                        option.value = nature.nature;
                        option.textContent = nature.nature;
                        option.dataset.severity = nature.severity;
                        natureSelect.appendChild(option);
                    });
                }
            });

            // Update severity when nature changes
            natureSelect.addEventListener("change", function() {
                var selectedOption = natureSelect.options[natureSelect.selectedIndex];
                severityInput.value = selectedOption.dataset.severity || '';
            });

            // Set initial values if editing
            categorySelect.value = "@Model.CategoryOfError";
            var initialNatures = natureMapping.filter(m => m.categories.includes("@Model.CategoryOfError"));
            initialNatures.forEach(function(nature) {
                var option = document.createElement("option");
                option.value = nature.nature;
                option.textContent = nature.nature;
                option.dataset.severity = nature.severity;
                natureSelect.appendChild(option);
            });
            natureSelect.value = "@Html.Raw(Model.NatureOfError)";
            severityInput.value = "@Html.Raw(Model.Severity)";
        });
    </script>
}
