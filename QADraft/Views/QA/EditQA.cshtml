@model GeekQA

@{
    ViewData["Title"] = "Edit QA";
}

<h2>Edit QA</h2>

<!-- Form to get updated information on the selected user -->
<form asp-action="EditQA" method="post">
    <div asp-validation-summary="All" class="text-danger"></div>
    <input type="hidden" asp-for="Id" />
    <div class="form-group">
        <label asp-for="CommittedById" class="control-label"></label>
        <select asp-for="CommittedById" class="form-control" asp-items="Model.Users"></select>
        <span asp-validation-for="CommittedById" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="FoundById" class="control-label"></label>
        <select asp-for="FoundById" class="form-control" asp-items="Model.Users"></select>
        <span asp-validation-for="FoundById" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="CategoryOfError" class="control-label"></label>
        <select asp-for="CategoryOfError" class="form-control" id="categorySelect">
            <option value="">Select Category</option>
            <!-- Populate categories dynamically with JavaScript -->
        </select>
        <span asp-validation-for="CategoryOfError" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="NatureOfError" class="control-label"></label>
        <select asp-for="NatureOfError" class="form-control" id="natureSelect">
            <option value="">Select Nature</option>
            <!-- Populate natures dynamically with JavaScript -->
        </select>
        <span asp-validation-for="NatureOfError" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Severity" class="control-label"></label>
        <input type="text" asp-for="Severity" class="form-control" id="severityInput" readonly />
        <span asp-validation-for="Severity" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="CustomerName" class="control-label"></label>
        <input asp-for="CustomerName" class="form-control" placeholder="If none, type N/A" />
        <span asp-validation-for="CustomerName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="UnitId" class="control-label"></label>
        <input asp-for="UnitId" class="form-control" placeholder="If none, type N/A" />
        <span asp-validation-for="UnitId" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="ErrorDate" class="control-label"></label>
        <input asp-for="ErrorDate" class="form-control" type="date" value="@Model.ErrorDate.ToString("yyyy-MM-dd")" />
        <span asp-validation-for="ErrorDate" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="FoundOn" class="control-label"></label>
        <input asp-for="FoundOn" class="form-control" type="date" />
        <span asp-validation-for="FoundOn" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Description" class="control-label"></label>
        <textarea asp-for="Description" class="form-control" placeholder="Describe the QA"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
    <div class="form-group">
        <input type="submit" value="Save Changes" class="btn btn-primary" />
    </div>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        var natureMapping = [
            // your nature mappings here
        ];

        var categories = Array.from(new Set(natureMapping.flatMap(m => m.categories)));
        
        document.addEventListener("DOMContentLoaded", function() {
            var categorySelect = document.getElementById("categorySelect");
            var natureSelect = document.getElementById("natureSelect");
            var severityInput = document.getElementById("severityInput");

            // Populate categories dropdown
            categories.forEach(function(category) {
                var option = document.createElement("option");
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });

            // Update nature options when category changes
            categorySelect.addEventListener("change", function() {
                var selectedCategory = categorySelect.value;
                natureSelect.innerHTML = '<option value="">Select Nature</option>'; // Reset natures
                severityInput.value = ''; // Reset severity

                if (selectedCategory) {
                    var natures = natureMapping.filter(m => m.categories.includes(selectedCategory));
                    natures.forEach(function(nature) {
                        var option = document.createElement("option");
                        option.value = nature.nature;
                        option.textContent = nature.nature;
                        option.dataset.severity = nature.severity;
                        natureSelect.appendChild(option);
                    });
                }
            });

            // Update severity when nature changes
            natureSelect.addEventListener("change", function() {
                var selectedOption = natureSelect.options[natureSelect.selectedIndex];
                severityInput.value = selectedOption.dataset.severity || '';
            });

            // Set initial values if editing
            categorySelect.value = "@Model.CategoryOfError";
            var initialNatures = natureMapping.filter(m => m.categories.includes("@Model.CategoryOfError"));
            initialNatures.forEach(function(nature) {
                var option = document.createElement("option");
                option.value = nature.nature;
                option.textContent = nature.nature;
                option.dataset.severity = nature.severity;
                natureSelect.appendChild(option);
            });
            natureSelect.value = "@Model.NatureOfError";
            severityInput.value = "@Model.Severity";
        });
    </script>
}
