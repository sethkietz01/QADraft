@model QADraft.Models.GeekQA

@{
    ViewData["Title"] = "Add QA";
}

<style>
    /* Underlines the current page's link in the nav bar */
    #add-qa-link {
        padding-bottom: 1px;
        border-bottom: 1px solid #fff;
    }

    /* Styles for the submit button */
    #submit-qa {
        margin-top: 20px;
        margin-bottom: 20px;
        background-color: #861F41;
        border-color: #861F41;
        color: #fff;
    }

    .confirmation-dialog {
        display: none;
        position: fixed;
        z-index: 9999;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        background-color: #d9f0ff;
        border: 1px solid #ccc;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        max-width: 300px;
    }

    .confirmation-content {
        text-align: center;
    }

    .confirmation-buttons {
        margin-top: 20px;
    }

    .confirmation-buttons button {
        padding: 10px 20px;
        margin: 0 10px;
        cursor: pointer;
    }

    .add-qa-button{
        color: #fff;
        background-color: #861F41;
        border-color: #861F41;
    }
        .add-qa-button:hover{
            color: #fff;
            background-color: #b31f4f;
            border-color: #E6A65D
        }
</style>

<h2>Add QA</h2>

<!-- Form to get details about the QA being added -->
<form asp-action="AddQA" method="post">
    <div class="form-group">
        <label asp-for="CommittedById" class="control-label">Committed By</label>
        <select asp-for="CommittedById" class="form-control" asp-items="Model.Users">
            <option class="placeholder" value="" disabled selected>Select user</option>
        </select>
        <span asp-validation-for="CommittedById" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="FoundById" class="control-label">Found By</label>
        <select asp-for="FoundById" class="form-control" asp-items="Model.Users">
            <option class="placeholder" value="" disabled selected>Select user</option>
        </select>
        <span asp-validation-for="FoundById" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="CategoryOfError" class="control-label">Category of Error</label>
        <select asp-for="CategoryOfError" class="form-control" id="categorySelect">
            <option value="">Select Category</option>
            <!-- Populate categories dynamically with JavaScript -->
        </select>
        <span asp-validation-for="CategoryOfError" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="NatureOfError" class="control-label">Nature of Error</label>
        <select asp-for="NatureOfError" class="form-control" id="natureSelect">
            <option value="">Select Nature</option>
            <!-- Populate natures dynamically with JavaScript -->
        </select>
        <span asp-validation-for="NatureOfError" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Severity" class="control-label">Severity</label>
        <input type="textfield" asp-for="Severity" class="form-control" id="severityInput" readonly />
        <span asp-validation-for="Severity" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="CustomerName" class="control-label">Customer Name</label>
        <input asp-for="CustomerName" class="form-control" placeholder="If none, type N/A" />
        <span asp-validation-for="CustomerName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="UnitId" class="control-label">Unit ID</label>
        <input asp-for="UnitId" class="form-control" placeholder="If none, type N/A" />
        <span asp-validation-for="UnitId" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="ErrorDate" class="control-label">Error Date</label>
        <input asp-for="ErrorDate" class="form-control" type="date" value="@Model.ErrorDate.ToString("yyyy-MM-dd")" />
        <span asp-validation-for="ErrorDate" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="FoundOn" class="control-label">Found On</label>
        <input asp-for="FoundOn" class="form-control" type="date" />
        <span asp-validation-for="FoundOn" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Description" class="control-label">Description</label>
        <textarea asp-for="Description" class="form-control" placeholder="Describe the QA"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <!-- Form Submit -->
    <input type="submit" value="Add QA" hidden/>

</form>

<div>
    <button onclick="openConfirmation()" class="btn buttons form-buttons">Add QA</button>
</div>


<!-- Add QA Complete Popup -->
<div id="confirmationDialog" class="confirmation-dialog">
    <div class="confirmation-content">
        <p>Press Confirm to submit the QA Report</p>
        <div class="confirmation-buttons">
            <button class="btn btn-danger" onclick="confirmAdd()">Confirm</button>
            <button class="btn btn-secondary" onclick="closeConfirmation()">Cancel</button>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        var natureMapping = [
            { nature: "Didn't check out asset at all (Not in SnipeIT)", categories: ["Snipe-It"], severity: "9", involves: "" },
            { nature: "Didn't update Snipe-It at all (Rechecks/Check ins)", categories: ["Snipe-It"], severity: "9", involves: "" },
            { nature: "Incorrect due date", categories: ["Snipe-It", "DocuSign"], severity: "6", involves: "" },
            { nature: "Didn't upload EULA", categories: ["Snipe-It"], severity: "6", involves: "" },
            { nature: "Didn't update status", categories: ["Snipe-It"], severity: "5", involves: "" },
            { nature: "Didn't comment in Snipe-It", categories: ["Snipe-It"], severity: "5", involves: "" },
            { nature: "Clicked edit asset instead of check-in/check-out", categories: ["DocuSign"], severity: "5", involves: "" },
            { nature: "Gave equipment and didn't start a checkout form", categories: ["DocuSign"], severity: "10", involves: "" },
            { nature: "Didn't complete EULA", categories: ["DocuSign"], severity: "10", involves: "" },
            { nature: "Didn't complete paperwork", categories: ["DocuSign"], severity: "7", involves: "" },
            { nature: "Didn't comment for swap", categories: ["DocuSign"], severity: "6", involves: "" },
            { nature: "Wrong unit ID", categories: ["DocuSign"], severity: "6", involves: "" },
            { nature: "Didn't send walk-in form", categories: ["DocuSign"], severity: "4", involves: "" },
            { nature: "On wrong step", categories: ["DocuSign"], severity: "3", involves: "" },
            { nature: "Checked out to someone on no checkout list", categories: ["Processes"], severity: "10", involves: "" },
            { nature: "Charged incorrect fees", categories: ["Processes"], severity: "10", involves: "" },
            { nature: "Did not check Docusign when setting Late Fees", categories: ["Processes"], severity: "10", involves: "" },
            { nature: "Checked in/out with missing items", categories: ["Processes"], severity: "8", involves: "" },
            { nature: "Didn't check ID", categories: ["Processes"], severity: "8", involves: "" },
            { nature: "Left student personal information open", categories: ["Processes"], severity: "8", involves: "" },
            { nature: "Didn't check for damages", categories: ["Processes"], severity: "8", involves: "" },
            { nature: "Checked out same laptop after a recheck", categories: ["Processes"], severity: "7", involves: "" },
            { nature: "Improper extension", categories: ["Processes"], severity: "7", involves: "" },
            { nature: "Didn't do reminder emails/courtesy calls", categories: ["Processes"], severity: "7", involves: "" },
            { nature: "Didn't clear SD card", categories: ["Processes"], severity: "5", involves: "" },
            { nature: "Didn't give password at checkout", categories: ["Processes"], severity: "5", involves: "" },
            { nature: "Didn't create footprint", categories: ["Processes"], severity: "4", involves: "" },
            { nature: "Didn't clean equipment", categories: ["Processes"], severity: "2", involves: "" },
            { nature: "Improper initials on tasks", categories: ["Processes"], severity: "2", involves: "" },
            { nature: "Tidiness/Cleanliness issue", categories: ["Processes"], severity: "2", involves: "" },
            { nature: "Didn't send late Fees", categories: ["Processes"], severity: "10", involves: "" },
            { nature: "Rechecked Equipment That Can't Be Rechecked", categories: ["Processes"], severity: "10", involves: "" },
            { nature: "Gross Misconduct", categories: ["Desk Conduct"], severity: "10", involves: "" },
            { nature: "No call/No show", categories: ["Desk Conduct"], severity: "10", involves: "" },
            { nature: "Unprofessional behavior", categories: ["Desk Conduct"], severity: "9", involves: "" },
            { nature: "Didn't Sign out", categories: ["Desk Conduct"], severity: "7", involves: "" },
            { nature: "Tardy", categories: ["Desk Conduct"], severity: "5", involves: "" },
            { nature: "Off-Task", categories: ["Desk Conduct"], severity: "4", involves: "" },
            { nature: "Forgot geek shirt", categories: ["Other"], severity: "5", involves: "" },
            { nature: "Time card", categories: ["Other"], severity: "5", involves: "" },
            { nature: "Forgot name tag", categories: ["Other"], severity: "3", involves: "" },
            { nature: "Improper communication", categories: ["Other"], severity: "1", involves: "" },
            { nature: "Loitering", categories: ["Other"], severity: "1", involves: "" },
            { nature: "Removed student from NCL shouldn't have", categories: ["Other"], severity: "10", involves: "Student" }
        ];

        var categories = Array.from(new Set(natureMapping.flatMap(m => m.categories)));
        
        document.addEventListener("DOMContentLoaded", function() {
            var categorySelect = document.getElementById("categorySelect");
            var natureSelect = document.getElementById("natureSelect");
            var severityInput = document.getElementById("severityInput");

            // Populate categories dropdown
            categories.forEach(function(category) {
                var option = document.createElement("option");
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });

            // Update nature options when category changes
            categorySelect.addEventListener("change", function() {
                var selectedCategory = categorySelect.value;
                natureSelect.innerHTML = '<option value="">Select Nature</option>'; // Reset natures
                severityInput.value = ''; // Reset severity
                severityInput.style.backgroundColor = "#fff";

                if (selectedCategory) {
                    var natures = natureMapping.filter(m => m.categories.includes(selectedCategory));
                    natures.forEach(function(nature) {
                        var option = document.createElement("option");
                        option.value = nature.nature;
                        option.textContent = nature.nature;
                        option.dataset.severity = nature.severity;
                        natureSelect.appendChild(option);
                    });
                }
            });

            // Update severity when nature changes
            natureSelect.addEventListener("change", function() {
                var selectedOption = natureSelect.options[natureSelect.selectedIndex];
                severity = selectedOption.dataset.severity || '';
                severityInput.value = severity;

                switch (severity)
                {
                    case '1':
                        severityInput.style.background = "#ffe000";
                        break;
                    case '2':
                        severityInput.style.background = "#ffce00";
                        break;
                    case '3':
                        severityInput.style.background = "#ffb700";
                        break;
                    case '4':
                        severityInput.style.background = "#ffb000";
                        break;
                    case '5':
                        severityInput.style.background = "#ffa500";
                        break;
                    case '6':
                        severityInput.style.background = "#ff9900";
                        break;
                    case '7':
                        severityInput.style.background = "#ff8e00";
                        break;
                    case '8':
                        severityInput.style.background = "#ff7b00";
                        break;
                    case '9':
                        severityInput.style.background = "#dc0505";
                        break;
                    case '10':
                        severityInput.style.background = "#dc0542";
                        break;
                    default:
                        severityInput.style.background = "#fff";
                }
            });
        });


        function openConfirmation() {
            console.log("OpenConfirmation");

            // Show the confirmation dialog
            document.getElementById('confirmationDialog').style.display = 'block';
        }

        function closeConfirmation() {
            document.getElementById('confirmationDialog').style.display = 'none';
        }

        function confirmAdd() {
            closeConfirmation();
            document.querySelector('input[type="submit"][value="Add QA"]').click();
            console.log("Clicked");
            closeConfirmationDialog();
            return false;
        }
    </script>
}