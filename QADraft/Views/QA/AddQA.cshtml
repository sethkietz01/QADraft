@model QADraft.Models.GeekQA

@{
    ViewData["Title"] = "Add QA";
    Layout = ViewBag.Layout;
}
<!-- Load naturemapping from NatureMap.js-->
<script src="~/js/NatureMap.js"></script>

<h2>Add QA</h2>


<!-- Form to get details about the QA being added -->
<form asp-action="AddQA" method="post">
    <div class="form-group">
        <label asp-for="CommittedById" class="control-label">Committed By</label>
        <select id="committed-by" asp-for="CommittedById" class="form-control" asp-items="Model.Users" required>
            <option class="placeholder" value="" disabled selected>Select user</option>
        </select>
        <span asp-validation-for="CommittedById" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="FoundById" class="control-label">Found By</label>
        <select id="found-by" asp-for="FoundById" class="form-control" asp-items="Model.Coordinators">
            <option class="placeholder" value="" disabled selected>Select user</option>
        </select>
        <span asp-validation-for="FoundById" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="CategoryOfError" class="control-label">Category of Error</label>
        <select asp-for="CategoryOfError" class="form-control" id="categorySelect">
            <option class="placeholder" value="" disabled selected>Select Category</option>
            <!-- Populate categories dynamically with JavaScript -->
        </select>
        <span asp-validation-for="CategoryOfError" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="NatureOfError" class="control-label">Nature of Error</label>
        <select asp-for="NatureOfError" class="form-control" id="natureSelect">
            <option class="placeholder" value="" disabled selected>Select Nature</option>
            <option class="placeholder" value="" disabled>Please select a category to see natures</option>
            <!-- Populate natures dynamically with JavaScript -->
        </select>
        <span asp-validation-for="NatureOfError" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Severity" class="control-label">Severity</label>
        <input type="textfield" asp-for="Severity" class="form-control disabled-input" id="severityInput" readonly />
        <span asp-validation-for="Severity" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="CustomerName" class="control-label">Customer Name</label>
        <input id="customer-name" asp-for="CustomerName" class="form-control" placeholder="If none, leave blank" />
        <span asp-validation-for="CustomerName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="UnitId" class="control-label">Unit ID</label>
        <input id="unit-id" asp-for="UnitId" class="form-control" placeholder="If none, leave blank" />
        <span asp-validation-for="UnitId" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="ErrorDate" class="control-label">Commited On</label>
        <input id="commited-on" asp-for="ErrorDate" class="form-control" type="date" value="@Model.ErrorDate.ToString("yyyy-MM-dd")" />
        <span asp-validation-for="ErrorDate" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="FoundOn" class="control-label">Found On</label>
        <input id="found-on" asp-for="FoundOn" class="form-control" type="date" />
        <span asp-validation-for="FoundOn" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Description" class="control-label">Description</label>
        <textarea id="description" asp-for="Description" class="form-control" placeholder="Describe the QA"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <!-- Form Submit -->
    <input type="submit" value="Add QA" hidden/>
</form>

<!-- Submit QA and Cancel buttons -->
<div class="button-container">
    <button onclick="openConfirmation()" class="buttons form-buttons">Submit</button>

    <!-- Cancel and redirect to home -->
    <form class="cancel-forms" asp-area="" asp-controller="Home" asp-action="Index" method="get">
        <button type="submit" class="buttons form-buttons">Cancel</button>
    </form>
</div>

<!-- Modal Popupf for Delete QA confirmation -->
<dialog id="dialog">
	<div class="confirmation-content">
        <!-- Confirmation text -->
        <p>Press OK to submit the QA Report.</p>
        <!-- Confirmation button container -->
        <div class="confirmation-buttons">
            <!-- Confirmation buttons. Yes will call confirmDelete which will trigger 
            the deleteButton input. No will close the confirmation dialog -->
            <button class="buttons" onclick="confirmAddQA()">OK</button> 
            <button class="buttons-accent" onclick="window.dialog.close();">Cancel</button>
        </div>
    </div>
	<button onclick="window.dialog.close();" class="x">❌</button>
</dialog>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>

        var categories = Array.from(new Set(natureMapping.flatMap(m => m.categories)));
        
        document.addEventListener("DOMContentLoaded", function() {

            var categorySelect = document.getElementById("categorySelect");
            var natureSelect = document.getElementById("natureSelect");
            var severityInput = document.getElementById("severityInput");


            // Highlight the current page's link
            var addQaLink = document.getElementById('add-qa-link'); 
            addQaLink.classList.toggle('highlight-link');

            // Populate categories dropdown
            categories.forEach(function(category) {
                var option = document.createElement("option");
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
            });

            // Update nature options when category changes
            categorySelect.addEventListener("change", function() {
                var selectedCategory = categorySelect.value;
                natureSelect.innerHTML = '<option class="placeholder" value="" disabled selected>Select Nature</option>'; // Reset natures
                severityInput.value = '0'; // Reset severity

                if (selectedCategory) {
                    var natures = natureMapping.filter(m => m.categories.includes(selectedCategory));
                    natures.forEach(function(nature) {
                        var option = document.createElement("option");
                        option.value = nature.nature;
                        option.textContent = nature.nature;
                        option.dataset.severity = nature.severity;
                        natureSelect.appendChild(option);
                    });
                }
            });

            // Update category and nature dropdowns with value from view model (if there is one)
            var categoryVal = "@Model.CategoryOfError";
            var natureVal = "@Model.NatureOfError";

            console.log(categoryVal + ":" + natureVal);

            if (!categoryVal == "") {
                categorySelect.value = categoryVal;
                categorySelect.dispatchEvent(new Event('change'));
                natureSelect.value = natureVal;
            }

            // Update severity when nature changes
            natureSelect.addEventListener("change", function() {
                var selectedOption = natureSelect.options[natureSelect.selectedIndex];
                severity = selectedOption.dataset.severity || '';
                severityInput.value = severity;
            });
        });

        function openConfirmation() {
            // Show the confirmation dialog
            window.dialog.showModal();
        }

        function confirmAddQA() {
            // If 'OK' is clicked, submit the form
            document.querySelector('input[type="submit"][value="Add QA"]').click();

            // Close the modal
            window.dialog.close();
        }

        function validateDates() {
            var committedOnDate = new Date(document.getElementById("commited-on").value);
            var foundOnDate = new Date(document.getElementById("found-on").value);

            if (committedOnDate > foundOnDate) {
                alert("Committed on date cannot be after the found on date."); // Show error message
                return false; // Prevent form submission
            }
            return true; // Allow form submission
        }

        // Add event listener for form submission
        document.querySelector('form').addEventListener('submit', function(event) {
            var customerName = document.getElementById("customer-name");
            var unitId = document.getElementById("unit-id");

            // Automatically populate the customer name and unit ID with N/A if they are left blank
            if (! customerName.value)
                    customerName.value = "N/A";

                if (! unitId.value)
                    unitId.value = "N/A";
        });
    </script>
}