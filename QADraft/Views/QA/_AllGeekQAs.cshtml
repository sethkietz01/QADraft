@model List<QADraft.Models.GeekQA>
 
@{
    ViewData["Title"] = "All QA's";
    Layout = ViewBag.Layout;
    string menu = ViewBag.menu;
}
 
<style>
    .action-btn {
        color: #fff;
        background-color: #861F41;
        border-color: #861F41;
    }
 
        .action-btn:hover {
            color: #fff;
            background-color: #b31f4f;
            border-color: #E6A65D;
        }
 
    .confirmation-dialog {
        display: none;
        position: fixed;
        z-index: 9999;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        background-color: #d9f0ff;
        border: 1px solid #ccc;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        max-width: 300px;
    }
 
    .confirmation-content {
        text-align: center;
    }
 
    /* Style for the confirmation buttons */
    .confirmation-buttons {
        margin-top: 20px;
    }
 
    .confirmation-buttons button {
        padding: 10px 20px;
        margin: 0 10px;
        cursor: pointer;
    }
 
    /* Underlines the current page's link in the nav bar */
    #qa-menu-link {
        padding-bottom: 1px;
        border-bottom: 1px solid #fff;
    }
</style>
 
<!-- Load the partial view for the menu buttons -->
@Html.Partial(@menu)
<h2>All QAs</h2>

<!-- Show and hide piechart -->
<button onclick="toggleChart()" class="buttons">Show/Hide</button>
<div>
    <!-- Partial view must placed within a div that is nested in another div. -->
    <div id="chartDiv">
        <!-- Load the partial view for the DonutChart-->
        <partial name="DonutChart"/>
    </div>
</div>
 
<!-- Table used to output QAs -->
<table class="table-qa" id="table">
    <!-- Table Header -->
    <thead>
        <tr>
            <!-- sortTable(x) calls the javascript function from _ReportsMenu to sort 
            by the specified column where x is the column index. The class "arrow" is 
            used by the function to edit the column header -->
            <th onclick="sortTable(0)">Committed By<span class="arrow"></th>
            <th onclick="sortTable(1)">Found By<span class="arrow"></th>
            <th onclick="sortTable(2)">Category<span class="arrow"></th>
            <th onclick="sortTable(3)">Nature<span class="arrow"></th>
            <th onclick="sortTable(4)">Severity<span class="arrow"></th>
            <th onclick="sortTable(5)">Commited On<span class="arrow"></th>
            <th onclick="sortTable(6)">Found On<span class="arrow"></th>
            <th class="noSort">Actions</th> <!-- Don't allow the user to sort by the action column -->
        </tr>
    </thead>
    <!-- Table Body -->
    <tbody>
        <!-- Populate the table with all QAs form the database -->
        @foreach (var qa in Model.OrderByDescending(q => q.ErrorDate))
        {
            // Create a new table row
            <tr>
                @* Insert table data from model *@
                <td>@qa.CommittedBy?.FirstName @qa.CommittedBy?.LastName</td>
                <td>@qa.FoundBy?.FirstName @qa.FoundBy?.LastName</td>
                <td>@qa.CategoryOfError</td>
                <td>@qa.NatureOfError</td>
                <td class="severity-cell" data-severity="@qa.Severity">@qa.Severity</td>
                <td>@qa.ErrorDate.ToString("yyyy-MM-dd")</td>
                <td>@qa.FoundOn.ToString("yyyy-MM-dd")</td>
                @* Insert the form inputs into the table row *@
                <td>
                    @* Assign the form method as POST and the appropriate controller and IActionResult *@
                    <form method="post" asp-controller="QA" asp-action="ManageQA">
                        @* Create hidden input to pass the ID with POST *@
                        <input type="hidden" name="qaId" value="@qa.Id" />
                        @* Create div to hold buttons *@
                        <div class="form-group">
                            @* Inputs that send action with POST. That value is used in ManageQA to determine the correct action to take *@
                            <input id="updateButton" type="submit" name="action" value="View/Edit" class="buttons"  />
                            @* The delete input is hidden and cannot be selected by the user *@
                            <input id="deleteButton" type="submit" name="action" value="Delete QA" class="buttons" hidden/> 
                            @* Hidden input to pass the source with POST *@
                            <input type="hidden" name="source" value="AllGeekQAs" />
                            @* This button's onclick will open a confirmation dialog. In that dialog you can confirm the 
                            delete action which will trigger the delete button input *@
                            <button id="deleteButton" onclick="openConfirmationDialog(event)" class="buttons">Delete</button>
                        </div>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>
 
<!-- Configure delete QA confirmation popup -->
<div id="confirmationDialog" class="confirmation-dialog">
    <div class="confirmation-content">
        <!-- Confirmation text -->
        <p>Are you sure you want to delete this QA?</p>
        <!-- Confirmation button container -->
        <div class="confirmation-buttons">
            <!-- Confirmation buttons. Yes will call confirmDelete which will trigger 
            the deleteButton input. No will close the confirmation dialog -->
            <button class="btn btn-danger" onclick="confirmDelete()">Yes</button>
            <button class="btn btn-primary" onclick="closeConfirmationDialog()">No</button>
        </div>
    </div>
</div>
 
@section Scripts {
<script>
        // Document event listener to listen for page being loaded
        document.addEventListener("DOMContentLoaded", function() {
            // Load the QAMenu partial view content
            fetch('@Url.Action("QAMenu", "Home")')
                .then(response => response.text())
                .then(html => {
                    document.getElementById("qa-content").innerHTML = html;
                });
        });
 
        // Function called by the delete button.
        function openConfirmationDialog(event) {
            event.preventDefault(); // Prevent default behavior
 
            // Get the correct form to be submitted
            var parentForm = event.target.closest('form');
            window.currentForm = parentForm;
            // Style the Confirmation Dialog elements to be shown
            document.getElementById('confirmationDialog').style.display = 'block';
        }
 
        // Function called by the No button in the confirmation dialog popup
        function closeConfirmationDialog() {
            // Style the Confirmtaion Dialog elements to be hidden
            document.getElementById('confirmationDialog').style.display = 'none';
        }
 
        // Function called by the Yes button in the confirmation dialog popup
        function confirmDelete() {
            // Using the form we saved in openConfirmationDialog(), use .click() on the form input to delete the QA
            window.currentForm.querySelector('input[type="submit"][name="action"][value="Delete QA"]').click();
            // If for some reason the page does not change, close the popup and return false (serves to close the function)
            closeConfirmationDialog();
            return false;
        }

        // Code to Hide/Show the DonutChart(s)
        // Set toggle's value to false. Toggle represents the current state of visibility
        var toggle = false;
        toggleChart();      // Call toggleChart() to hide the chart

        // Function to toggle the visibility of the DonutChart(s)
        function toggleChart() {
            // Select the div containing the chart and the buttons to change chart
            // Toggle their visibility using .toggle(bool)
            $("#chartDiv").toggle(toggle);
            $("#categoryBtn").toggle(toggle);
            $("#natureBtn").toggle(toggle);
            // Flip the value of toggle so that the next time it is called the visiblity of the elements will flip.
            toggle = !toggle;
        }
        
    </script>
}
 
