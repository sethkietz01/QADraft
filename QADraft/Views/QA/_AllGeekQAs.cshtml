@model List<QADraft.Models.GeekQA>

@{
    ViewData["Title"] = "All QA's";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<style>
    .action-btn {
        color: #fff;
        background-color: #861F41;
        border-color: #861F41;
    }

        .action-btn:hover {
            color: #fff;
            background-color: #b31f4f;
            border-color: #E6A65D;
        }

    .confirmation-dialog {
        display: none;
        position: fixed;
        z-index: 9999;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        background-color: #d9f0ff;
        border: 1px solid #ccc;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        max-width: 300px;
    }

    .confirmation-content {
        text-align: center;
    }

    .confirmation-buttons {
        margin-top: 20px;
    }

    .confirmation-buttons button {
        padding: 10px 20px;
        margin: 0 10px;
        cursor: pointer;
    }

    #descriptionButton {

        padding: 5px 8px;
    }

    #description-icon {
        width: 22px;
        height: 22px;
    }

    /* Underlines the current page's link in the nav bar */
    #qa-menu-link {
        padding-bottom: 1px;
        border-bottom: 1px solid #fff;
    }

</style>

<partial name="_ReportsMenu" />
<h2>All QAs</h2>

<!-- Table used to output QAs -->
<table class="table table-striped" id="QATable">
    <thead>
        <tr id="TD">
            <th>
                <a href="#" onclick="sortTable('Committed By')">Committed By</a>
            </th>
            <th onclick="sortTable(0)">Committed By</th>
            <th>Found By</th>
            <th>Category</th>
            <th>Nature</th>
            <th>Severity</th>
            <th>Date</th>
            <th>Actions</th> 
        </tr>
    </thead>
    <tbody>
        <!-- Populate the table with all QAs form the database -->
        @foreach (var qa in Model)
        {
            <tr>
                <td>@qa.CommittedBy?.FirstName @qa.CommittedBy?.LastName</td>
                <td>@qa.FoundBy?.FirstName @qa.FoundBy?.LastName</td>
                <td>@qa.CategoryOfError</td>
                <td>@qa.NatureOfError</td>
                <td>@qa.Severity</td>
                <td>@qa.ErrorDate.ToString("yyyy-MM-dd")</td>
                <td>
                    <form method="post" asp-controller="QA" asp-action="ManageQA">

                        <input type="hidden" name="qaId" value="@qa.Id" />
                        <div class="form-group">
                            <button id="descriptionButton" type="button" class="btn buttons" onclick="showDescription()"> <img id="description-icon" src="~/images/descriptionIconWhite.png"> </button>

                            <input id="updateButton" type="submit" name="action" value="Update" class="btn buttons" />
                            <input id="deleteButton" type="submit" name="action" value="Delete QA" class="btn buttons" hidden/>

                            <button id="deleteButton" onclick="openConfirmationDialog(event)" class="btn buttons">Delete</button>
                        </div>
                        <p id="qaDescription" hidden>@qa.Description</p>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Configure delete QA confirmation popup -->
<div id="confirmationDialog" class="confirmation-dialog">
    <div class="confirmation-content">
        <p>Are you sure you want to delete this QA?</p>
        <div class="confirmation-buttons">
            <button class="btn btn-danger" onclick="confirmDelete()">Yes</button>
            <button class="btn btn-primary" onclick="closeConfirmationDialog()">No</button>
        </div>
    </div>
</div>


<!-- Description Dialog popup -->
<div id="descriptionDialog" class="confirmation-dialog">
    <div class="confirmation-content">
        <h>QA Description</h>
        <p id="description-text"></p>
        <div class="confirmation-buttons">
            <button class="btn btn-primary" onclick="closeDescription()">Close</button>
        </div>
    </div>
</div>



@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // Load the QAMenu partial view content
            fetch('@Url.Action("QAMenu", "Home")')
                .then(response => response.text())
                .then(html => {
                    document.getElementById("qa-content").innerHTML = html;
                });
        });

        function showDescription() {
            console.log("Show Description");
            document.getElementById('descriptionDialog').style.display = 'block';
        }

        function closeDescription() {
            console.log("Close Description");
            document.getElementById('descriptionDialog').style.display = 'none';
        }


        function openConfirmationDialog(event) {
            event.preventDefault(); // Prevent default behavior

            // Show the confirmation dialog
            console.log("openconfirm");
            var parentForm = event.target.closest('form');
            window.currentForm = parentForm;
            document.getElementById('confirmationDialog').style.display = 'block';
        }

        function closeConfirmationDialog() {
            console.log("close confirm");
            document.getElementById('confirmationDialog').style.display = 'none';
        }

        function confirmDelete() {
            console.log("confirmdelete");
            window.currentForm.querySelector('input[type="submit"][name="action"][value="Delete QA"]').click();
            closeConfirmationDialog();
            return false;
        }


        //table sorting
        function sortTable(n) {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("QATable");
            switching = true;
            
            //default sort direction to ascending
            dir = "asc"; 

            while (switching){
                //assume that table is sorted already
                switching  = false;
                rows = table.rows;

                //loop through rows
                for (i = 1; i < (rows.length - 1); i++) {
                    //assume sorted
                    shouldSwitch = false;

                    x = rows[i].getElementsByTagName("TD")[0];
                    y = rows[i+1].getElementsByTagName("TD")[0]


                    //check if they should swap
                    if (x.innerHTML.toLowerCase() > Y.innerHTML.toLowerCase() ){
                        shouldSwitch = true;
                        break;
                    }
                }

                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i+1], rows[i])
                    switching = true;
                }
            }

        }

    </script>
}

