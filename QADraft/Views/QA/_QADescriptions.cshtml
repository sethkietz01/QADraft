@model QADraft.Models.GeekQA

@{
    ViewData["Title"] = "QA Descriptions";
    Layout = ViewBag.Layout;
    string menu = ViewBag.menu;
}

<!-- Load the partial view for the menu buttons -->
@Html.Partial(@menu)
<h2>QA Descriptions</h2>

<!-- Load naturemapping from NatureMap.js-->
<script src="~/js/NatureMap.js"></script>

<!-- Placeholder form to get the category and nature -->
<form method="post">
    <div class="form-group">
        <label asp-for="CategoryOfError" class="control-label"></label>
        <select asp-for="CategoryOfError" class="form-control" id="categorySelect">
            <option value="">Select Category</option>
            <!-- Populate categories dynamically with JavaScript -->
        </select>
        <span asp-validation-for="CategoryOfError" class="text-danger"></span>
    </div>


    <div class="form-group">
        <label asp-for="NatureOfError" class="control-label"></label>
        <select asp-for="NatureOfError" class="form-control" id="natureSelect">
            <option value="">Select Nature</option>
            <!-- Populate natures dynamically with JavaScript -->
        </select>
        <span asp-validation-for="NatureOfError" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Severity" class="control-label"></label>
        <input type="text" asp-for="Severity" class="form-control disabled-input" id="severityInput" readonly />
        <span asp-validation-for="Severity" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Description" class="control-label"></label>
        <textarea id="descriptionInput" asp-for="Description" class="form-control disabled-input" readonly></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
</form>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>

        var categories = Array.from(new Set(natureMapping.flatMap(m => m.categories)));
        
        document.addEventListener("DOMContentLoaded", function() {
            var categorySelect = document.getElementById("categorySelect");
            var natureSelect = document.getElementById("natureSelect");
            var severityInput = document.getElementById("severityInput");

            console.log("1");

            // Highlight the current page's link
            var qaMenuLink = document.getElementById('qa-menu-link'); 
            qaMenuLink.classList.toggle('highlight-link');

            // Change the color of the button that brings you to this page
            var thisPageButton = document.getElementById('qa-descriptions-button');
            thisPageButton.classList.toggle('button-for-current-page');

            console.log("2");
            // Populate categories dropdown
            categories.forEach(function(category) {
                var option = document.createElement("option");
                option.value = category;
                option.textContent = category;
                categorySelect.appendChild(option);
                console.log("loop");
            });
            console.log("3");
            // Update nature options when category changes
            categorySelect.addEventListener("change", function() {
                var selectedCategory = categorySelect.value;
                natureSelect.innerHTML = '<option value="">Select Nature</option>'; // Reset natures
                severityInput.value = ''; // Reset severity
                descriptionInput.value = ''; // Reset description

                if (selectedCategory) {
                    var natures = natureMapping.filter(m => m.categories.includes(selectedCategory));
                    natures.forEach(function(nature) {
                        var option = document.createElement("option");
                        option.value = nature.nature;
                        option.textContent = nature.nature;
                        option.dataset.severity = nature.severity;
                        option.dataset.description = nature.description
                        natureSelect.appendChild(option);
                    });
                }
            });

            // Update severity and description when nature changes
            natureSelect.addEventListener("change", function() {
                var selectedOption = natureSelect.options[natureSelect.selectedIndex];
                severityInput.value = selectedOption.dataset.severity || '';
                descriptionInput.value = selectedOption.dataset.description || '';
            });

        });
    </script>
}
