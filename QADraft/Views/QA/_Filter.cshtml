@* Define the model being used in the page. Uses a list of GeekQAs *@
@model List<QADraft.Models.GeekQA>

@{
    ViewData["Title"] = "Filter QAs";
    Layout = ViewBag.Layout;
}

<partial name="_ReportsMenu" />
<h2>Filter QAs</h2>

<!-- Place the filter options within a div -->
<div class="filter-section">
    <!-- Create the form element and assign the controller and action -->
    <form id="filterForm" method="get" asp-controller="QA" asp-action="Filter">
        <!-- Create div to contain the date selection elements -->
        <div class="form-group">
            <!-- Checkbox that toggles the visibility of the date selection elements -->
            <input type="checkbox" id="dateFilter" name="dateFilter" onchange="toggleDatePicker(this)">
            <label for="dateFilter">Sort by Error Date</label>
            <!-- Container for the date picking elements -->
            <div id="datePickers" style="display: none;">
                <label for="startDate">Start Date:</label>
                <input type="text" id="startDate" name="startDate" class="datepicker form-control hidden-date" onchange="changeStartDate()">
                <label for="endDate">End Date:</label>
                <input type="text" id="endDate" name="endDate" class="datepicker form-control hidden-date" onchange="changeEndDate()">
            </div>
        </div>
        <!-- Create div to contain the Committed By elements -->
        <div class="form-group">
            <!-- Label for CommittedBy-->
            <label for="committedBy" class="control-label">Committed By</label>
            <!-- Create the drop down selection for CommitedBy -->
            <select id="committedBy" name="committedBy" class="form-control">
                <option value="">Any User</option>
                <!-- Populate the dropdown with user list passed through the ViewBag -->
                @foreach (var user in ViewBag.Users)
                {
                    @* For each user, add their first and last name as a selection option *@
                    <option value="@user.Id">@user.FirstName @user.LastName</option>
                }
            </select>
        </div>
        <!-- Create div to contain the Logged By elements -->
        <div class="form-group">
            <!-- Label for LoggedBy -->
            <label for="loggedBy" class="control-label">Logged By</label>
            <!-- Create the drop down selection for LoggedBy -->
            <select id="loggedBy" name="loggedBy" class="form-control">
                <option value="">Any User</option>
                <!-- Populate the dropdown with user list passed through the ViewBag -->
                @foreach (var user in ViewBag.Users)
                {
                    @* For each user, add theri first and last name as a selection option *@
                    <option value="@user.Id">@user.FirstName @user.LastName</option>
                }
            </select>
        </div>
        <!-- Create div to contain the Category elements -->
        <div class="form-group">
            <!-- Label for Category -->
            <label for="category" class="control-label">Category</label>
            <!-- Create the dropdown selection for Category-->
            <select id="category" name="category" class="form-control">
                <option value="">Any Category</option>
                <!-- Populate the dropdown with categories list passed through the ViewBag -->
                @foreach (var category in ViewBag.Categories)
                {
                    @* For each category, add it as a selection option *@
                    <option value="@category.Value">@category.Text</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="severity" class="control-label">Severity</label>
            <select id="severity" name="severity" class="form-control">
                <option value"">Any Severity</option>
                @for (int i = 1; i <= 10; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="customerName" class="control-label">Customer Name</label>
            <input id="customer-name" name="customerName" class="form-control" placeholder="Any Customer" />
        </div>
        <!-- Create div to contain submission buttons -->
        <div class="button-group">
            <button type="submit" class="buttons table-buttons">Apply Filters</button>
            <!-- Button click calls js function resetFilters() -->
            <button type="button" class="buttons table-buttons" onclick="resetFilters()">Reset Filters</button>
        </div>
    </form>
</div>

<div id="query-results-header">

</div>

<!-- Place the QA table under the filter options-->
<table id="table" class="table-qa">
    <!-- Create the table headers-->
    <thead>
        <tr>
            <!-- sortTable(x) calls the javascript function from _ReportsMenu to sort 
            by the specified column where x is the column index. The class "arrow" is 
            used by the function to edit the column header -->
            <th onclick="sortTable(0)">Committed By<span class="arrow"></th>
            @*<th onclick="sortTable(1)">Found By<span class="arrow"></th>*@
            <th onclick="sortTable(2)">Category<span class="arrow"></th>
            <th onclick="sortTable(3)">Nature<span class="arrow"></th>
            <th id="all-qas-severity-table-header" onclick="sortTable(4)">Severity<span class="arrow"></th>
            <th id="all-qas-committed-on-table-header" onclick="sortTable(5)">Committed On<span class="arrow"></th>
            @*<th onclick="sortTable(6)">Found On<span class="arrow"></th>*@
            <th id="all-qas-actions-table-header" class="noSort">Actions</th> <!-- Don't allow the user to sort by the action column -->
        </tr>
    </thead>
    <!-- Create the table body -->
    <tbody>
        <!-- Verify that the Model exists and is not null -->
        @if (Model != null)
        {
            @* If it exists, then populate the table *@
            @foreach (var qa in Model.OrderByDescending(q => q.ErrorDate))
            {
                @* Add each QA in the list of GeekQAs in its own table row *@
                <tr id="qa-row-@qa.Id">
                    @* Insert the data from the model *@
                    <td>@qa.CommittedBy?.FirstName @qa.CommittedBy?.LastName</td>
                    <td>@qa.CategoryOfError</td>
                    <td>@qa.NatureOfError</td>
                    <td id="all-qas-severity-table-data" class="severity-cell-container" data-severity="@qa.Severity"><div class="severity-cell"><span class="severity-span">@qa.Severity</span></div></td>
                    <td id="all-qas-committed-on-table-data">@qa.ErrorDate.ToString("MM-dd-yyyy")</td>
                    <td id="all-qas-actions-table-data">
                        @* Insert form elements into each row *@
                        @* Assign the form method as POST and the appropriate controller and IActionResult *@
                        <form method="post" asp-controller="QA" asp-action="ManageQA" >
                            @* Create hidden input to pass the ID with POST *@
                            <input type="hidden" name="qaId" value="@qa.Id" />
                             @* Create div to hold buttons *@
                            <div class="form-group">
                                @* Inputs that send action with POST. That value is used in ManageQA to determine the correct action to take *@
                                <input id="updateButton" type="submit" name="action" value="View/Edit" class="buttons table-buttons" />
                                @* The delete input is hidden and cannot be selected by the user *@
                                <input id="deleteButton" type="submit" name="action" value="Delete QA" class="buttons table-buttons" hidden />
                                @* Hidden input to pass the source with POST *@
                                <input type="hidden" name="source" value="Filter" />
                                @* This button's onclick will open a confirmation dialog. In that dialog you can confirm the 
                                delete action which will trigger the delete button input *@
                                <button id="deleteButton_@qa.Id" onclick="openConfirmationDialog(event)" class="buttons table-buttons">Delete</button>
                                <button id="description-button" class="buttons" onclick='showDetailsModal("@qa.Id", "@qa.FoundBy?.FirstName @qa.FoundBy?.LastName", "@qa.CustomerName", "@qa.UnitId", "@qa.FoundOn", "@qa.Description", "@qa.CreatedAt", "@qa.SubmittedBy", "@qa.CommittedBy?.FirstName @qa.CommittedBy?.LastName", "@qa.ErrorDate", "@qa.Severity", "@qa.CategoryOfError", "@qa.NatureOfError");'>
                                    <img id="description-icon" src="~/images/descriptionIconWhite.png" alt="Details" />
                                </button>
                            </div>
                        </form>
                    </td>
                    @* For each row, check if the user is a coordinator and if the QA was committed by them. If it was, disable the Delete button *@
                    <script>
                        // Get the variables from the ViewBag
                        var userRole = '@ViewBag.UserRole';
                        var userName = '@ViewBag.UserName';

                        // Check if the user is a Coordinator
                        if (userRole == "Coordinator")
                        {
                            // Get the text of the committedSelect element 
                            var committedBy = '@qa.CommittedBy?.FirstName' + ' ' + '@qa.CommittedBy?.LastName'
                            console.log(committedBy)
                            // Check if the CommittedBy name is the same as the user's name
                            if (committedBy == userName) {
                                // If it is, disable the Edit button
                                var deleteBtn = document.getElementById("deleteButton_@qa.Id");
                                deleteBtn.disabled = true;
                            }
                        }
                    </script>
                </tr>
            }
        }
    </tbody>
</table>

<!-- Modal Popupf for Delete QA confirmation -->
<dialog id="dialog">
	<div class="confirmation-content">
        <!-- Confirmation text -->
        <p>Are you sure you want to delete this QA?</p>
        <!-- Confirmation button container -->
        <div class="confirmation-buttons">
            <!-- Confirmation buttons. Yes will call confirmDelete which will trigger 
            the deleteButton input. No will close the confirmation dialog -->
            <button class="buttons" onclick="confirmDelete()">Yes</button> 
            <button class="buttons-accent" onclick="window.dialog.close();">No</button>
        </div>
    </div>
	<button onclick="window.dialog.close();" class="x">❌</button>
</dialog>

<!-- Modal Popup for details -->
<dialog id="dialog-details" class="dialog-popups">
    <div class="confirmation-content">
        <div class="details-modal-content">
            <div class="form-group">
                <label class="popup-labels">Committed By</label>
                <p id='committed-by-output'></p>
            </div>
            <div class="form-group bordered-grid">
                <label class="popup-labels">Found By</label>
                <p id='found-by-output'></p>
            </div>
            <div class="form-group">
                <label class="popup-labels">Submitted By</label>
                <p id='submitted-by-output'></p>
            </div>
            <div class="form-group">
                <label class="popup-labels">Committed On</label>
                <p id='committed-on-output'></p>
            </div>
            <div class="form-group bordered-grid">
                <label class="popup-labels">Found On</label>
                <p id='found-on-output'></p>
            </div>
            <div class="form-group">
                <label class="popup-labels">Submitted On</label>
                <p id='created-on-output'></p>
            </div>
            <div class="form-group">
                <label class="popup-labels">Customer</label>
                <p id='customer-name-output'></p>
            </div>
            <div class="form-group bordered-grid">
                <label class="popup-labels">Unit ID</label>
                <p id='unit-id-output'></p>
            </div>
            <div class="form-group">
                <label class="popup-labels">Severity</label>
                <p id='severity-output'></p>
            </div>
            <div id="griddy-test" class="grid-test">
                <div class="form-group grid-border-bottom">
                    <label class="popup-labels">Category</label>
                    <p id='category-output'></p>
                </div>
                <div class="form-group grid-border-bottom">
                    <label class="popup-labels">Nature</label>
                    <p id='nature-output'></p>
                </div>
            </div>
            <div class="form-group grid-span-three-columns">
                <label class="popup-labels">Description</label>
                <p id='description-output'></p>
            </div>
        </div>
        <!-- Confirmation button container -->
        <div class="confirmation-buttons">
            <!-- Confirmation buttons. Yes will call confirmDelete which will trigger
            the deleteButton input. No will close the confirmation dialog -->
            <button id="cancel-delete-event-button" class="buttons" onclick="closeDetailsModal();">Close</button>
        </div>
    </div>
    <input id="highlight-cell" type="text" disabled hidden />
    <input id="color-before-highlight" type="text" disabled hidden />
    <button onclick="closeDetailsModal();" class="x">❌</button>
</dialog>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" />
    <script>
        document.addEventListener('DOMContentLoaded', function() {
                // Highlight the current page's link
                var qaMenuLink = document.getElementById('qa-menu-link'); 
                qaMenuLink.classList.toggle('highlight-link');

                // Change the color of the button that brings you to this page
                var thisPageButton = document.getElementById('filter-qas-button');
                thisPageButton.classList.toggle('button-for-current-page');
        });

        function toggleDatePicker(checkbox) {
            console.log("Toggle Date Picker: ", checkbox.checked); // Debug output
            var datePickers = document.getElementById("datePickers");
            datePickers.style.display = checkbox.checked ? "block" : "none";
        }

        function resetFilters() {
            document.getElementById("filterForm").reset();

            // Explicitly reset individual form fields
            document.getElementById("committedBy").selectedIndex = 0;
            document.getElementById("loggedBy").selectedIndex = 0;
            document.getElementById("category").selectedIndex = 0;

            // Uncheck and hide date pickers
            document.getElementById("dateFilter").checked = false;
            toggleDatePicker({ checked: false });

            // Reset date picker values
            $('#startDate').datepicker('setDate', null);
            $('#endDate').datepicker('setDate', null);


            storeFilterSelections();

            // Create a new form element
            const form = document.createElement('form');

            // Set the action attribute to "Filter"
            form.setAttribute('asp-action', 'Filter');

            // Optionally, set other attributes if needed, e.g., method="GET" or method="POST"
            form.setAttribute('method', 'GET');

            // Append the form to the document body (or any other desired location)
            document.body.appendChild(form);

            // Immediately submit the form
            form.submit();
        }

        $(document).ready(function () {
            console.log("Document Loaded"); // Debug output
            // Initialize date pickers
            $('#startDate').datepicker({
                dateFormat: 'yy-mm-dd'
            });
            $('#endDate').datepicker({
                dateFormat: 'yy-mm-dd'
            });
        });

        // Function called by the delete button to open confirmation modal
        function openConfirmationDialog(event) {
            event.preventDefault(); // Prevent default behavior
            
            // Get the correct form to be submitted
            var parentForm = event.target.closest('form');
            window.currentForm = parentForm;
            // Show the modal
            window.dialog.showModal();
        }


        function confirmDelete() {
            console.log("confirmdelete");
            window.currentForm.querySelector('input[type="submit"][name="action"][value="Delete QA"]').click();
            closeConfirmationDialog();
            return false;
        }

        function changeStartDate() {
            console.log("changeStartDate");

            var startDate = document.getElementById("startDate");

            startDate.classList.remove("hidden-date");
            startDate.classList.add("visible-date");
        }

        function changeEndDate() {
            console.log("changeEndDate");

            var startDate = document.getElementById("startDate");
            var endDate = document.getElementById("endDate");

            var startDateFormat = new Date(startDate.value);
            var endDateFormat = new Date(endDate.value);


            if (endDateFormat < startDateFormat)
            {
                endDate.value = startDate.value;
            }

            endDate.classList.remove("hidden-date");
            endDate.classList.add("visible-date");
        }


        // Function to store current filter selections in local storage
        function storeFilterSelections() {
            localStorage.setItem('committedBy', document.getElementById('committedBy').value);
            localStorage.setItem('loggedBy', document.getElementById('loggedBy').value);
            localStorage.setItem('category', document.getElementById('category').value);
        }

        // Function to restore filter selections from local storage
        function restoreFilterSelections() {
            document.getElementById('committedBy').value = localStorage.getItem('committedBy') || '';
            document.getElementById('loggedBy').value = localStorage.getItem('loggedBy') || '';
            document.getElementById('category').value = localStorage.getItem('category') || '';
        }

        // Event listener to store selections before form submission
        document.getElementById('filterForm').addEventListener('submit', function() {
            storeFilterSelections();
        });

        // Call restore function on document load to restore selections
        document.addEventListener('DOMContentLoaded', function() {
            restoreFilterSelections();
        });

        function showDetailsModal(qaId, foundBy, customerName, unitId, foundOn, description, createdOn, submittedBy, committedBy, committedOn, severity, category, nature) {
            event.preventDefault();

            const dialogDetails = document.getElementById('dialog-details');

            var tableRow = document.getElementById('qa-row-' + qaId);
            var committedByOutput = document.getElementById('committed-by-output');
            var foundByOutput = document.getElementById('found-by-output');
            var submittedByOutput = document.getElementById('submitted-by-output');
            var committedOnOutput = document.getElementById('committed-on-output');
            var foundOnOutput = document.getElementById('found-on-output');
            var submittedOnOutput = document.getElementById('created-on-output');
            var customerNameOutput = document.getElementById('customer-name-output');
            var unitIdOutput = document.getElementById('unit-id-output');
            var severityOutput = document.getElementById('severity-output');
            var categoryOutput = document.getElementById('category-output');
            var natureOutput = document.getElementById('nature-output');
            var descriptionOutput = document.getElementById('description-output');


            var committedOnDate = committedOn.split(' ');
            var foundOnDate = foundOn.split(' ');

            committedByOutput.textContent = committedBy;
            foundByOutput.textContent = foundBy;
            submittedByOutput.textContent = submittedBy;
            committedOnOutput.textContent = committedOnDate[0];
            foundOnOutput.textContent = foundOnDate[0];
            submittedOnOutput.textContent = createdOn;
            customerNameOutput.textContent = customerName;
            unitIdOutput.textContent = unitId;
            severityOutput.textContent = severity;
            categoryOutput.textContent = category;
            natureOutput.textContent = nature;
            descriptionOutput.textContent = description;

            dialogDetails.addEventListener('wheel', function (event) {
                event.preventDefault();
            });

            // Reset background for all td elements in tableRow
            var tdElements = tableRow.getElementsByTagName('td');
            for (var i = 0; i < tdElements.length; i++) {
                tdElements[i].style.backgroundImage = 'none';
            }

            //tableRow.style.backgroundImage = "radial-gradient(circle, rgba(230, 168, 93, 0.2), rgba(230, 168, 93, 0.4))";

            var highlightCell = document.getElementById('highlight-cell');
            highlightCell.value = qaId;

            var colorBeforeHighlightInput = document.getElementById('color-before-highlight');
            colorBeforeHighlightInput.value = window.getComputedStyle(tableRow).backgroundColor;

            applySeverityColors();

            if ('@Context.Session.GetString("Theme")' === 'dark') {
                tableRow.style.boxShadow = '0 0 5px 1px rgba(255, 255, 255, 1)';
            }
            else {
                tableRow.style.boxShadow = '0 0 5px 1px rgba(230, 168, 93, 1)';
            }

            dialogDetails.showModal();
        }

        function closeDetailsModal() {
            var highlightCell = document.getElementById('highlight-cell');
            var colorBeforeHighlightInput = document.getElementById('color-before-highlight');
            var tableRow = document.getElementById('qa-row-' + highlightCell.value);

            tableRow.style.backgroundColor = colorBeforeHighlightInput.value;
            tableRow.style.boxShadow = '0 0 0';

            applySeverityColors();

            var detailsModal = document.getElementById('dialog-details');
            detailsModal.close();
        }
    </script>
}
<!--
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
-->

