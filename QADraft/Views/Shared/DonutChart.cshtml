<!-- This partial view will place the pie chart into main page wherever you place the partial -->
<!-- If the chart is not showing, ensure that the Dictionaries are passed by the  -->
@{
    //load viewbag dictionaries
    var categoryDict = ViewBag.categoryDict as Dictionary<string, int>;
    var natureDict = ViewBag.natureDict as Dictionary<string, int>;
}

<button id="categoryBtn" onclick="call_donut('category')" class="buttons form-buttons">Category</button>
<button id="natureBtn" onclick="call_donut('nature')" class="buttons form-buttons">Nature</button>
<h1 id="chartDesc_donut">Name here</h1>


<!-- Load d3.js -->
<script src="https://d3js.org/d3.v6.js"></script>

<div id="container_donutchart" />

<script>
// set the dimensions and margins of the graph
const width_donut = 1150,
    height_donut = 550,
    margin_donut = 60;

// The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
const radius = Math.min(width_donut, height_donut) / 2 - margin_donut

// append the svg object to the div called 'container_donutchart'
const svg_donut = d3.select("#container_donutchart")
  .append("svg")
    .attr("width", width_donut)
    .attr("height", height_donut)
  .append("g")
    .attr("transform", `translate(${width_donut/2},${height_donut/2})`);


function call_donut(type) {
    let data = {}; // To store the current data
    let title = document.getElementById('chartDesc_donut');

    if (type === 'category') {
        data = @Html.Raw(Json.Serialize(ViewBag.categoryDict));
        title.innerHTML  = "Category";
        console.log(title.innerText);
    }
    if (type === 'nature') {
        data = @Html.Raw(Json.Serialize(ViewBag.natureDict));
        title.innerHTML  = "Nature";
    }
    console.log(Object.keys(data));
    update_donut(data);
}

 
// Set the color scale
const color = d3.scaleOrdinal()
    .range(d3.schemeCategory10);

function update_donut(data) {
    // Update the color domain based on the current data
    color.domain(Object.keys(data));

    // Compute the position of each group on the pie:
    const pie = d3.pie()
      .sort(null) // Do not sort group by size
      .value(d => d[1]);
    const data_ready = pie(Object.entries(data));

    // The arc generator
    const arc = d3.arc()
      .innerRadius(radius * 0.5)         // This is the size of the donut hole
      .outerRadius(radius * 0.8);

    // Another arc that won't be drawn. Just for labels positioning
    const outerArc = d3.arc()
      .innerRadius(radius * 0.9)
      .outerRadius(radius * 0.9);

    // Select all slices
    const slices = svg_donut.selectAll('.slice')
      .data(data_ready);

    // Update existing slices
    slices
      .transition() // Add transition
      .duration(1000) // Duration of transition
      .attrTween("d", function(d) { // Interpolate between old and new paths
          const interpolate = d3.interpolate(this._current, d);
          this._current = interpolate(0);
          return function(t) {
              return arc(interpolate(t));
          };
      })
      .attr('fill', d => color(d.data[0]));

    // Enter new slices
    slices.enter()
      .append('path')
      .attr('class', 'slice')
      .attr('d', arc)
      .attr('fill', d => color(d.data[0]))
      .attr("stroke", "white")
      .style("stroke-width", "2px")
      .style("opacity", 0.7)
      .transition() // Add transition
      .duration(1000) // Duration of transition
      .attrTween("d", function(d) { // Interpolate between old and new paths
          const interpolate = d3.interpolate(this._current, d);
          this._current = interpolate(0);
          return function(t) {
              return arc(interpolate(t));
          };
      });

    // Remove old slices
    slices.exit()
      .remove();

    // Add the polylines between chart and labels:
    const polylines = svg_donut.selectAll('.polyline')
      .data(data_ready);

    // Update existing polylines
    polylines
      .transition() // Add transition
      .duration(1000) // Duration of transition
      .attr('points', function(d) {
        const posA = arc.centroid(d); // line insertion in the slice
        posA[0] = posA[0] * 1.1;
        posA[1] = posA[1] * 1.1;
        const posB = outerArc.centroid(d); // line break: we use the other arc generator that has been built only for that
        const posC = outerArc.centroid(d); // Label position = almost the same as posB
        const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2; // we need the angle to see if the X position will be at the extreme right or extreme left
        posC[0] = radius * 1.15 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left
        return [posA, posB, posC];
      });

    // Enter new polylines
    polylines.enter()
      .append('polyline')
      .attr("class", "polyline")
      .attr("stroke", "black")
      .style("fill", "none")
      .attr("stroke-width", 1)
      .attr('points', function(d) {
        const posA = arc.centroid(d); // line insertion in the slice
        posA[0] = posA[0] * 1.1;
        posA[1] = posA[1] * 1.1;
        const posB = outerArc.centroid(d); // line break: we use the other arc generator that has been built only for that
        const posC = outerArc.centroid(d); // Label position = almost the same as posB
        const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2; // we need the angle to see if the X position will be at the extreme right or extreme left
        posC[0] = radius * 1.15 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left
        return [posA, posB, posC];
      });

    // Remove old polylines
    polylines.exit()
      .remove();


    // Add the labels:
    const labels = svg_donut.selectAll('.label')
      .data(data_ready);

    // Update existing labels
    labels
      .text(d => d.data[0])
      .attr('transform', function(d) {
        const pos = outerArc.centroid(d);
        const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;
        pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);
        return `translate(${pos})`;
      })
      .style('text-anchor', function(d) {
        const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;
        return (midangle < Math.PI ? 'start' : 'end');
      });

    // Enter new labels
    labels.enter()
      .append('text')
      .attr("class", "label")
      .text(d => d.data[0])
      .attr('transform', function(d) {
        const pos = outerArc.centroid(d);
        const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;
        pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);
        return `translate(${pos})`;
      })
      .style('text-anchor', function(d) {
        const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;
        return (midangle < Math.PI ? 'start' : 'end');
      });

    // Remove old labels
    labels.exit()
      .remove();

    // Clear existing label numbers
    var total = 0;
    for (var part in data) {
        if (data.hasOwnProperty( part ) ) {
            total += parseInt( data[part] );
        }
    }
    console.log(total);

    var percents = [];
    for (var part in data) {
        var per = parseInt(data[part]) / total;
        per = (per * 100).toFixed(1);
        percents.push(per);
    }

    console.log(percents[0]);

    svg_donut.selectAll(".labelNumber").remove();

    // Add labels numbering the slices
    svg_donut.selectAll(".labelNumber")
      .data(data_ready)
      .enter()
      .append("text")
      .attr("class", "labelNumber")
      .attr("transform", d => `translate(${arc.centroid(d)})`)
      .attr("dy", "0.35em")
      .attr("text-anchor", "middle")
      .text((d, i) => percents[i] + "%"); // Numbering starts from 1

    // Remove old label numbers
    svg_donut.selectAll(".labelNumber")
      .data(data_ready)
      .exit()
      .remove();



    
}

call_donut('category');

</script>