@{
    var categoryDict = ViewBag.categoryDict as Dictionary<string, int>;
    var natureDict = ViewBag.natureDict as Dictionary<string, int>;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Donut to Bar Chart Conversion</title>
</head>
<body>
    <h2>Graph by Category</h2>

    <!-- Load d3.js -->
    <script src="https://d3js.org/d3.v6.js"></script>

    <div id="container"></div>

    <script>
        // set the dimensions and barMargins of the graph
        const barMargin = { top: 20, right: 30, bottom: 70, left: 60 },
            barWidth = 450 - barMargin.left - barMargin.right,
            barHeight = 400 - barMargin.top - barMargin.bottom;


        // append the barSvg object to the div called 'container'
        const barSvg = d3.select("#bar-chart-div")
            .append("svg")
            .attr("width", barWidth + barMargin.left + barMargin.right)
            .attr("height", 443)
            .append("g")
            .attr("transform", `translate(${barMargin.left},${barMargin.top})`);


        // add the tooltip
        const barChartTooltip = d3.select("#bar-chart-tooltip");


        function generateRainbowColors(numOfColors) {
            // Create a sequential color scale with interpolateSinebow
            const colorScale = d3.scaleSequential(d3.interpolateSinebow)

            // Generate the array of colors
            return Array.from({ length: numOfColors }, (_, i) => colorScale(i / (numOfColors - 1)));
        }


        function callBar(type) {
            let data = {}; // To store the current data
            let title = "Graph by Category";

            

            if (type === 'category') {
                data = @Html.Raw(Json.Serialize(categoryDict));
                title.innerText = "Category";
            } else if (type === 'nature') {
                data = @Html.Raw(Json.Serialize(natureDict));
                title.innerText = "Nature";
            } else {
                // Get data of all natures
                init_data = @Html.Raw(Json.Serialize(natureDict));

                // Initialize an object to store the structured data
                data = {};

                // Use the natureMapping to grab only those natures where category is equal to type
                Object.keys(init_data).forEach(description => {
                    const count = init_data[description];
                    const entry = natureMapping.find(item => item.nature === description && item.categories.includes(type));
                    if (entry) {
                        data[description] = count; // Get the count of each nature
                    }
                });

                title.innerText = type;
            }

            
            // Sort the data descending
            var dataSorted = Object.keys(data).map(function(key) {
              return [key, data[key]];
            });

            // Sort the array based on the second element
            dataSorted.sort(function(first, second) {
              return second[1] - first[1];
            });
            
            update(data, title.innerText); // Pass title text to update function
        }

        function update(data, axisTitle) {
            const keys = Object.keys(data);
            const values = Object.values(data);


            console.log(data);
            console.log("Bar Chart Data: " + Object.keys(data));
            console.log("Bar Chart Data: " + Object.values(data));

            

            // Bubble sort the data descending
            for (var i = 0; i < values.length; i++) {
                for (var j = 0; j < values.length - i - 1; j++) {
                    if (values[j] < values[j+1]) {
                        // Swap keys
                        var keyTemp = keys[j];
                        keys[j] = keys[j+1];
                        keys[j+1] = keyTemp;

                        // Swap values
                        var valuesTemp = values[j];
                        values[j] = values[j+1];
                        values[j+1] = valuesTemp;
                    }
                }
            }

            // X scale
            const x = d3.scaleBand()
                .domain(keys)
                .range([0, barWidth])
                .padding(0.1);

            // Y scale
            const y = d3.scaleLinear()
                .domain([0, d3.max(values)])
                .nice()
                .range([barHeight, 0]);


            const colorsArray = generateRainbowColors(Object.keys(data).length);

            // Define a color scale with a predefined color scheme
            const colorScale = d3.scaleOrdinal()
                .range(colorsArray);

            // Calculate tick values dynamically
            const maxY = d3.max(values);
            const tickValues = d3.range(0, maxY + 1); // Generate an array of ticks from 0 to maxY

            // Update bars
            const bars = barSvg.selectAll(".bar")
                .data(keys);

            var labelColor = '';

            if ('@Context.Session.GetString("Theme")' === "dark") {
                labelColor = 'white';
            }
            else {
                labelColor = 'black';
            }

            // Add bars
            bars.enter().append("rect")
                .attr("class", "bar")
                .attr("x", d => x(d))
                .attr("width", x.bandwidth() * 0.8) // Adjust the width of the bars here
                .attr("y", barHeight)
                .attr("height", d => barHeight - y(data[d]))
                .attr("height", 0) // Start with zero height
                .attr("fill", d => colorScale(d)) // Assign color
                .on("mouseover", function (event, d) {
                    tooltip.transition()
                        .duration(200)
                        .style("opacity", .9);
                    tooltip.html(`<strong>${d}</strong>: ${data[d]}`)
                        .style("left", (event.pageX + 10) + "px")
                        .style("top", (event.pageY - 28) + "px");
                })
                .on("mouseout", function () {
                    tooltip.transition()
                        .duration(500)
                        .style("opacity", 0);
                })
                .merge(bars)
                .transition()
                .duration(1000)
                .attr("x", d => x(d) + x.bandwidth() * 0.1)
                .attr("y", d => y(data[d]))
                .attr("width", x.bandwidth() * 0.8) // Adjust the width of the bars here
                .attr("height", d => barHeight - y(data[d]));



            // Update x-axis
            barSvg.select(".x-axis").remove();
            barSvg.append("g")
                .attr("class", "x-axis")
                .attr("transform", `translate(0, 315)`)
                .call(d3.axisBottom(x))
                .selectAll("text")
                .style("text-anchor", "end")
                .attr("dx", "-.8em")
                .attr("dy", ".15em")
                .attr("transform", "rotate(-45)")
                .style("font-size", "12px"); // Adjust font size of x-axis labels

            // Update y-axis
            barSvg.select(".y-axis").remove();
            barSvg.append("g")
                .attr("class", "y-axis")
                .call(d3.axisLeft(y).tickValues(tickValues).tickFormat(d3.format("d"))) // Specify unique whole number ticks
                .selectAll("text")
                .style("font-size", "12px"); // Adjust font size of y-axis labels

            // Add X axis label
            barSvg.select(".x-axis-title").remove();
            barSvg.append("text")
                .attr("class", "x-axis-title")
                .attr("text-anchor", "middle")
                .attr("x", barWidth / 2)
                .attr("y", '400') // Adjust this value to position the title correctly
                .text(axisTitle) // Use the dynamic title
                .style("font-size", "16px"); // Adjust font size of x-axis title

            // Add Y axis label
            barSvg.select(".y-axis-title").remove();
            barSvg.append("text")
                .attr("class", "y-axis-title")
                .attr("text-anchor", "middle")
                .attr("transform", "rotate(-90)")
                .attr("y", -barMargin.left + 20)
                .attr("x", -barMargin.top - barHeight / 2)
                .attr("fill", labelColor)
                .text("Number of Errors") // Replace with your y-axis title
                .style("font-size", "16px"); // Adjust font size of y-axis title
        }

        callBar('category'); // Initial call to display category chart

    </script>
</body>
</html>
