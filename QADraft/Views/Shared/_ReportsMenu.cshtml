<style>
  
    .table-qa {
        padding: .5rem .5rem;
        padding-top: 0.5rem;
        padding-right: 0.5rem;
        padding-bottom: 0.5rem;
        padding-left: 0.5rem;
        width: 100%;
    }

    .table-qa tr {
        height: 50px;
        border-bottom: 1px solid #aaaaaa;
    }

    .table-qa tr:nth-child(even) {
        background-color: #eaeaea;
    }

    .table-qa tr:nth-child(odd) {
        background-color: #f5f5f5;
    }

    .table-qa td {
        vertical-align: middle
    }

    .table-qa th:nth-child(n + 5),
    .table-qa td:nth-child(n + 5) {
        text-align: center;
    }

    .menu-button {
        color: #fff;
        background-color: #861F41;
        border-color: #861F41;
    }
        
        .menu-button:hover {
            color: #fff;
            background-color: #b31f4f;
            border-color: #E6A65D;
        }

    #menu-bar {
        margin-bottom: 50px;
    }

    th {
        cursor: pointer;
        user-select: none;
    }

    .noSort {
        cursor: default;
        user-select: none;
    }


    .test-span {
        position: absolute;
        top: 10%;
        left: 25%;
        width: 50%;
        height: 75%;
        display: flex; /* Use flexbox for centering */
        justify-content: center; /* Center horizontally */
        align-items: center; /* Center vertically */
        box-sizing: border-box;
        border-radius: 10px;
    }

    .severity-cell {
        position: relative; 
    }
    
    .arrow {
        position: absolute;
    }


</style>

<h1>Reports Menu</h1>

<div id="menu-bar">
    <a class="buttons" asp-area="" asp-controller="QA" asp-action="YourQAs">Your QAs</a>
    <a class="buttons" asp-area="" asp-controller="QA" asp-action="Filter">Filter</a>
    <a class="buttons" asp-area="" asp-controller="QA" asp-action="AllGeekQAs">All Geek QAs</a>
    <a class="buttons" asp-area="" asp-controller="QA" asp-action="FlaggedAccounts">View All Flagged Accounts</a>
    <a class="buttons" asp-area="" asp-controller="QA" asp-action="QADescriptions">QA Descriptions</a>
</div>

<script>
    //table sorting
    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("table");
        switching = true;
            
        // Set the sorting direction to ascending:
        dir = "asc";
            
            
        //loop until end is reached
        while (switching) {
            // assume sorted
            switching = false;
            rows = table.rows;

            // Loop through all rows
            for (i = 1; i < (rows.length - 1); i++) {
                // assume no switching:
                shouldSwitch = false;

                // Get the current and next row
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];

                let xContent = x.innerHTML.trim();
                let yContent = y.innerHTML.trim();

                // Check if column content is numeric
                let xVal = isNaN(xContent) ? xContent.toLowerCase() : parseFloat(xContent);
                let yVal = isNaN(yContent) ? yContent.toLowerCase() : parseFloat(yContent);

                // Check if they should switch
                if (dir == "asc") {
                    if (xVal > yVal) {
                        shouldSwitch = true;
                        break;
                    }
                } 
                else if (dir == "desc") {
                    if (xVal < yVal) {
                        shouldSwitch = true;
                        break;
                    }
                }
            }

            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
                and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount ++;
                applySeverityColors();
            } 
            else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }

        }

        console.log("start arrows");

        // Reset all arrows
        let headers = table.getElementsByTagName("TH");
        console.log(headers.length);
        for (let header of headers) {
            let arrow = header.querySelector(".arrow");
            if (arrow) {
                arrow.innerHTML = "";
            }
        }
        console.log("reset arrows");
        // Add arrow to the current sorted column
        if (dir == "asc") {
            console.log("asc");
            headers[n].querySelector(".arrow").innerHTML = "▲";
        } else {
            console.log("desc");
            headers[n].querySelector(".arrow").innerHTML = "▼";
        }

        // Toggle the direction for the next click
        sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';

        console.log("end");

    }

    function getSeverityColor(severity)
    {
        let color = "";

        switch (severity)
        {
            case '1':
                color = "#ffe000";
                break;
            case '2':
                color = "#ffce00";
                break;
            case '3':
                color = "#ffb700";
                break;
            case '4':
                color = "#ffb000";
                break;
            case '5':
                color = "#ffa500";
                break;
            case '6':
                color = "#ff9900";
                break;
            case '7':
                color = "#ff8e00";
                break;
            case '8':
                color = "#ff7b00";
                break;
            case '9':
                color = "#dc0505";
                break;
            case '10':
                color = "#dc0542";
                break;
            default:
                color = "#fff";
                break;
        }
        return color;
    }
        

    function applySeverityColors() {
        var severityCells = document.querySelectorAll('td[data-severity]');

        severityCells.forEach(function(cell, index) {
            var severity = cell.getAttribute('data-severity');
            var severityColor = getSeverityColor(severity);
            var backgroundColor = '#000';
        
            if (index % 2 === 0) 
            {
                backgroundColor = '#f5f5f5';
            } 
            else 
            {
                backgroundColor = '#eaeaea';
            }

            // Color the whole cell
            //cell.style.backgroundColor = severityColor;

            // Color the border of the cell
            //cell.style.border = `2px solid ${severityColor}`;

            // Style a span
            /*
            var span = cell.querySelector('.test-span');
            if (span) {
                span.style.backgroundColor = severityColor;
            }
            */

            // Simple radial gradient
            //cell.style.background = `radial-gradient(circle, ${severityColor} 10%, rgba(255,255,255,0) 50%, ${backgroundColor} 100%)`;

            // Hollow radial gradient
            cell.style.background = `radial-gradient(circle, rgba(255,255,255,0) 20%, ${severityColor} 40%,  ${backgroundColor} 45%)`;
            cell.style.borderBottom = '1px solid #aaaaaa';

        
    });

    var severitySpans = document.querySelectorAll('.test-span');

        severitySpans.forEach(function(span)
        {
            var spanContent = span.textContent;

            if (spanContent == "10")
            {
                span.style.left = "24%";
            }
        });
}

    document.addEventListener('DOMContentLoaded', function() {
        applySeverityColors();
    });

</script>